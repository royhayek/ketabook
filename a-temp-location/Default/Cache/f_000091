define(['dart_sdk', 'packages/flutter_cache_manager/src/storage/cache_object.dart', 'packages/path_provider/path_provider.dart', 'packages/path/src/path_set.dart', 'packages/flutter_cache_manager/src/storage/cache_info_repositories/cache_info_repository.dart', 'packages/sqflite/src/factory_impl.dart', 'packages/sqflite_common/src/open_options.dart', 'packages/sqflite_common/src/exception.dart', 'packages/pedantic/pedantic.dart', 'packages/file/src/interface/link.dart', 'packages/flutter_cache_manager/src/result/file_info.dart', 'packages/flutter_cache_manager/src/result/file_response.dart', 'packages/flutter_cache_manager/src/result/download_progress.dart', 'packages/uuid/uuid.dart', 'packages/flutter_cache_manager/src/cache_managers/base_cache_manager.dart', 'packages/flutter_cache_manager/src/web/queue_item.dart', 'packages/rxdart/src/subjects/replay_subject.dart', 'packages/flutter_cache_manager/src/web/file_service.dart', 'packages/flutter_cache_manager/src/storage/cache_info_repositories/non_storing_object_provider.dart', 'packages/flutter_cache_manager/src/storage/file_system/file_system_web.dart', 'packages/flutter_cache_manager/src/storage/file_system/file_system.dart'], (function load__packages__flutter_cache_manager__src__storage__cache_info_repositories__json_cache_info_repository_dart(dart_sdk, packages__flutter_cache_manager__src__storage__cache_object$46dart, packages__path_provider__path_provider$46dart, packages__path__src__path_set$46dart, packages__flutter_cache_manager__src__storage__cache_info_repositories__cache_info_repository$46dart, packages__sqflite__src__factory_impl$46dart, packages__sqflite_common__src__open_options$46dart, packages__sqflite_common__src__exception$46dart, packages__pedantic__pedantic$46dart, packages__file__src__interface__link$46dart, packages__flutter_cache_manager__src__result__file_info$46dart, packages__flutter_cache_manager__src__result__file_response$46dart, packages__flutter_cache_manager__src__result__download_progress$46dart, packages__uuid__uuid$46dart, packages__flutter_cache_manager__src__cache_managers__base_cache_manager$46dart, packages__flutter_cache_manager__src__web__queue_item$46dart, packages__rxdart__src__subjects__replay_subject$46dart, packages__flutter_cache_manager__src__web__file_service$46dart, packages__flutter_cache_manager__src__storage__cache_info_repositories__non_storing_object_provider$46dart, packages__flutter_cache_manager__src__storage__file_system__file_system_web$46dart, packages__flutter_cache_manager__src__storage__file_system__file_system$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const io = dart_sdk.io;
  const typed_data = dart_sdk.typed_data;
  const collection = dart_sdk.collection;
  const _http = dart_sdk._http;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const cache_object = packages__flutter_cache_manager__src__storage__cache_object$46dart.src__storage__cache_object;
  const path_provider = packages__path_provider__path_provider$46dart.path_provider;
  const path = packages__path__src__path_set$46dart.path;
  const cache_info_repository = packages__flutter_cache_manager__src__storage__cache_info_repositories__cache_info_repository$46dart.src__storage__cache_info_repositories__cache_info_repository;
  const sqflite = packages__sqflite__src__factory_impl$46dart.sqflite;
  const sqlite_api = packages__sqflite_common__src__open_options$46dart.sqlite_api;
  const exception = packages__sqflite_common__src__exception$46dart.src__exception;
  const pedantic = packages__pedantic__pedantic$46dart.pedantic;
  const file = packages__file__src__interface__link$46dart.src__interface__file;
  const file_info = packages__flutter_cache_manager__src__result__file_info$46dart.src__result__file_info;
  const file_response = packages__flutter_cache_manager__src__result__file_response$46dart.src__result__file_response;
  const download_progress = packages__flutter_cache_manager__src__result__download_progress$46dart.src__result__download_progress;
  const uuid = packages__uuid__uuid$46dart.uuid;
  const base_cache_manager = packages__flutter_cache_manager__src__cache_managers__base_cache_manager$46dart.src__cache_managers__base_cache_manager;
  const queue_item = packages__flutter_cache_manager__src__web__queue_item$46dart.src__web__queue_item;
  const behavior_subject = packages__rxdart__src__subjects__replay_subject$46dart.src__subjects__behavior_subject;
  const file_service = packages__flutter_cache_manager__src__web__file_service$46dart.src__web__file_service;
  const non_storing_object_provider = packages__flutter_cache_manager__src__storage__cache_info_repositories__non_storing_object_provider$46dart.src__storage__cache_info_repositories__non_storing_object_provider;
  const file_system_web = packages__flutter_cache_manager__src__storage__file_system__file_system_web$46dart.src__storage__file_system__file_system_web;
  const file_system = packages__flutter_cache_manager__src__storage__file_system__file_system$46dart.src__storage__file_system__file_system;
  var json_cache_info_repository = Object.create(dart.library);
  var helper_methods = Object.create(dart.library);
  var cache_object_provider = Object.create(dart.library);
  var cache_info_repositories = Object.create(dart.library);
  var default_cache_manager = Object.create(dart.library);
  var cache_managers = Object.create(dart.library);
  var web_helper = Object.create(dart.library);
  var _config_web = Object.create(dart.library);
  var config = Object.create(dart.library);
  var cache_store = Object.create(dart.library);
  var cache_manager = Object.create(dart.library);
  var flutter_cache_manager = Object.create(dart.library);
  var $values = dartx.values;
  var $firstWhere = dartx.firstWhere;
  var $toList = dartx.toList;
  var $keys = dartx.keys;
  var $isEmpty = dartx.isEmpty;
  var $reduce = dartx.reduce;
  var $sort = dartx.sort;
  var $length = dartx.length;
  var $getRange = dartx.getRange;
  var $where = dartx.where;
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $endsWith = dartx.endsWith;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $cast = dartx.cast;
  var $join = dartx.join;
  var $containsKey = dartx.containsKey;
  var $addAll = dartx.addAll;
  var $contains = dartx.contains;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var CacheObjectL = () => (CacheObjectL = dart.constFn(dart.legacy(cache_object.CacheObject)))();
  var CacheObjectLToboolL = () => (CacheObjectLToboolL = dart.constFn(dart.fnType(boolL(), [CacheObjectL()])))();
  var VoidToNullN = () => (VoidToNullN = dart.constFn(dart.fnType(core.Null, [])))();
  var ListOfCacheObjectL = () => (ListOfCacheObjectL = dart.constFn(core.List$(CacheObjectL())))();
  var ListLOfCacheObjectL = () => (ListLOfCacheObjectL = dart.constFn(dart.legacy(ListOfCacheObjectL())))();
  var TAndTToT = () => (TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var CacheObjectLAndCacheObjectLTointL = () => (CacheObjectLAndCacheObjectLTointL = dart.constFn(dart.fnType(intL(), [CacheObjectL(), CacheObjectL()])))();
  var JSArrayOfCacheObjectL = () => (JSArrayOfCacheObjectL = dart.constFn(_interceptors.JSArray$(CacheObjectL())))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var IdentityMapOfStringL$CacheObjectL = () => (IdentityMapOfStringL$CacheObjectL = dart.constFn(_js_helper.IdentityMap$(StringL(), CacheObjectL())))();
  var MapOfStringL$dynamic = () => (MapOfStringL$dynamic = dart.constFn(core.Map$(StringL(), dart.dynamic)))();
  var MapLOfStringL$dynamic = () => (MapLOfStringL$dynamic = dart.constFn(dart.legacy(MapOfStringL$dynamic())))();
  var IdentityMapOfintL$MapLOfStringL$dynamic = () => (IdentityMapOfintL$MapLOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(intL(), MapLOfStringL$dynamic())))();
  var ListL = () => (ListL = dart.constFn(dart.legacy(core.List)))();
  var FileL = () => (FileL = dart.constFn(dart.legacy(io.File)))();
  var CompleterOfboolL = () => (CompleterOfboolL = dart.constFn(async.Completer$(boolL())))();
  var FutureOfNullN = () => (FutureOfNullN = dart.constFn(async.Future$(core.Null)))();
  var FutureLOfNullN = () => (FutureLOfNullN = dart.constFn(dart.legacy(FutureOfNullN())))();
  var DatabaseL = () => (DatabaseL = dart.constFn(dart.legacy(sqlite_api.Database)))();
  var DatabaseLAndintLToFutureLOfNullN = () => (DatabaseLAndintLToFutureLOfNullN = dart.constFn(dart.fnType(FutureLOfNullN(), [DatabaseL(), intL()])))();
  var DatabaseExceptionL = () => (DatabaseExceptionL = dart.constFn(dart.legacy(exception.DatabaseException)))();
  var DatabaseLAndintLAndintLToFutureLOfNullN = () => (DatabaseLAndintLAndintLToFutureLOfNullN = dart.constFn(dart.fnType(FutureLOfNullN(), [DatabaseL(), intL(), intL()])))();
  var FileSystemExceptionL = () => (FileSystemExceptionL = dart.constFn(dart.legacy(io.FileSystemException)))();
  var FileL$ = () => (FileL$ = dart.constFn(dart.legacy(file.File)))();
  var FileInfoL = () => (FileInfoL = dart.constFn(dart.legacy(file_info.FileInfo)))();
  var FileResponseL = () => (FileResponseL = dart.constFn(dart.legacy(file_response.FileResponse)))();
  var FileResponseLToFileInfoL = () => (FileResponseLToFileInfoL = dart.constFn(dart.fnType(FileInfoL(), [FileResponseL()])))();
  var StreamControllerOfFileResponseL = () => (StreamControllerOfFileResponseL = dart.constFn(async.StreamController$(FileResponseL())))();
  var DownloadProgressL = () => (DownloadProgressL = dart.constFn(dart.legacy(download_progress.DownloadProgress)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var FileResponseLToboolL = () => (FileResponseLToboolL = dart.constFn(dart.fnType(boolL(), [FileResponseL()])))();
  var ListOfintL = () => (ListOfintL = dart.constFn(core.List$(intL())))();
  var ListLOfintL = () => (ListLOfintL = dart.constFn(dart.legacy(ListOfintL())))();
  var ListLOfintLToListLOfintL = () => (ListLOfintLToListLOfintL = dart.constFn(dart.fnType(ListLOfintL(), [ListLOfintL()])))();
  var QueueItemL = () => (QueueItemL = dart.constFn(dart.legacy(queue_item.QueueItem)))();
  var ListQueueOfQueueItemL = () => (ListQueueOfQueueItemL = dart.constFn(collection.ListQueue$(QueueItemL())))();
  var BehaviorSubjectOfFileResponseL = () => (BehaviorSubjectOfFileResponseL = dart.constFn(behavior_subject.BehaviorSubject$(FileResponseL())))();
  var BehaviorSubjectLOfFileResponseL = () => (BehaviorSubjectLOfFileResponseL = dart.constFn(dart.legacy(BehaviorSubjectOfFileResponseL())))();
  var IdentityMapOfStringL$BehaviorSubjectLOfFileResponseL = () => (IdentityMapOfStringL$BehaviorSubjectLOfFileResponseL = dart.constFn(_js_helper.IdentityMap$(StringL(), BehaviorSubjectLOfFileResponseL())))();
  var _AsyncStarImplOfFileResponseL = () => (_AsyncStarImplOfFileResponseL = dart.constFn(async._AsyncStarImpl$(FileResponseL())))();
  var IdentityMapOfStringL$StringL = () => (IdentityMapOfStringL$StringL = dart.constFn(_js_helper.IdentityMap$(StringL(), StringL())))();
  var voidToNullN = () => (voidToNullN = dart.constFn(dart.fnType(core.Null, [dart.void])))();
  var StreamControllerOfintL = () => (StreamControllerOfintL = dart.constFn(async.StreamController$(intL())))();
  var FutureOfCacheObjectL = () => (FutureOfCacheObjectL = dart.constFn(async.Future$(CacheObjectL())))();
  var FutureLOfCacheObjectL = () => (FutureLOfCacheObjectL = dart.constFn(dart.legacy(FutureOfCacheObjectL())))();
  var IdentityMapOfStringL$FutureLOfCacheObjectL = () => (IdentityMapOfStringL$FutureLOfCacheObjectL = dart.constFn(_js_helper.IdentityMap$(StringL(), FutureLOfCacheObjectL())))();
  var CacheInfoRepositoryL = () => (CacheInfoRepositoryL = dart.constFn(dart.legacy(cache_info_repository.CacheInfoRepository)))();
  var boolLToCacheInfoRepositoryL = () => (boolLToCacheInfoRepositoryL = dart.constFn(dart.fnType(CacheInfoRepositoryL(), [boolL()])))();
  var CompleterOfCacheObjectL = () => (CompleterOfCacheObjectL = dart.constFn(async.Completer$(CacheObjectL())))();
  var CacheObjectLToFutureLOfNullN = () => (CacheObjectLToFutureLOfNullN = dart.constFn(dart.fnType(FutureLOfNullN(), [CacheObjectL()])))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  const CT = Object.create(null);
  var L3 = "package:flutter_cache_manager/src/storage/cache_info_repositories/cache_object_provider.dart";
  var L10 = "package:flutter_cache_manager/src/cache_store.dart";
  var L8 = "package:flutter_cache_manager/src/config/_config_web.dart";
  var L0 = "file:///D:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_cache_manager-2.0.0/lib/src/storage/cache_info_repositories/json_cache_info_repository.dart";
  var L1 = "package:flutter_cache_manager/src/storage/cache_info_repositories/helper_methods.dart";
  var L2 = "package:flutter_cache_manager/src/storage/cache_info_repositories/json_cache_info_repository.dart";
  var L9 = "package:flutter_cache_manager/src/config/config.dart";
  var L6 = "package:flutter_cache_manager/src/cache_managers/default_cache_manager.dart";
  var L7 = "package:flutter_cache_manager/src/web/web_helper.dart";
  var L5 = "package:flutter_cache_manager/src/cache_manager.dart";
  var L4 = "file:///D:/flutter/.pub-cache/hosted/pub.dartlang.org/flutter_cache_manager-2.0.0/lib/src/cache_manager.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 3000000
      });
    },
    get C1() {
      return C1 = dart.fn(math.max, TAndTToT());
    },
    get C2() {
      return C2 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 86400000000.0
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 2592000000000.0
      });
    },
    get C4() {
      return C4 = dart.constList([200, 202], intL());
    },
    get C5() {
      return C5 = dart.constList([304], intL());
    },
    get C6() {
      return C6 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 10000000
      });
    }
  }, false);
  var _cacheObjects = dart.privateName(json_cache_info_repository, "_cacheObjects");
  var _jsonCache = dart.privateName(json_cache_info_repository, "_jsonCache");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var C0;
  var _file = dart.privateName(json_cache_info_repository, "_file");
  var _getFile = dart.privateName(json_cache_info_repository, "_getFile");
  var _readFile = dart.privateName(json_cache_info_repository, "_readFile");
  var C1;
  var _put = dart.privateName(json_cache_info_repository, "_put");
  var _remove = dart.privateName(json_cache_info_repository, "_remove");
  var _saveFile = dart.privateName(json_cache_info_repository, "_saveFile");
  var _cacheUpdated = dart.privateName(json_cache_info_repository, "_cacheUpdated");
  var openConnections = dart.privateName(helper_methods, "CacheInfoRepositoryHelperMethods.openConnections");
  var openCompleter = dart.privateName(helper_methods, "CacheInfoRepositoryHelperMethods.openCompleter");
  helper_methods.CacheInfoRepositoryHelperMethods = class CacheInfoRepositoryHelperMethods extends cache_info_repository.CacheInfoRepository {};
  helper_methods.CacheInfoRepositoryHelperMethods[dart.mixinOn] = CacheInfoRepository => class CacheInfoRepositoryHelperMethods extends CacheInfoRepository {
    get openConnections() {
      return this[openConnections];
    }
    set openConnections(value) {
      this[openConnections] = value;
    }
    get openCompleter() {
      return this[openCompleter];
    }
    set openCompleter(value) {
      this[openCompleter] = value;
    }
    shouldOpenOnNewConnection() {
      this.openConnections = dart.notNull(this.openConnections) + 1;
      this.openCompleter == null ? this.openCompleter = CompleterOfboolL().new() : null;
      return this.openConnections === 1;
    }
    opened() {
      this.openCompleter.complete(true);
      return true;
    }
    shouldClose() {
      this.openConnections = dart.notNull(this.openConnections) - 1;
      if (this.openConnections === 0) {
        this.openCompleter = null;
      }
      return this.openConnections === 0;
    }
  };
  (helper_methods.CacheInfoRepositoryHelperMethods[dart.mixinNew] = function() {
    this[openConnections] = 0;
    this[openCompleter] = null;
  }).prototype = helper_methods.CacheInfoRepositoryHelperMethods.prototype;
  dart.addTypeTests(helper_methods.CacheInfoRepositoryHelperMethods);
  dart.addTypeCaches(helper_methods.CacheInfoRepositoryHelperMethods);
  helper_methods.CacheInfoRepositoryHelperMethods[dart.implements] = () => [cache_info_repository.CacheInfoRepository];
  dart.setMethodSignature(helper_methods.CacheInfoRepositoryHelperMethods, () => ({
    __proto__: dart.getMethods(helper_methods.CacheInfoRepositoryHelperMethods.__proto__),
    shouldOpenOnNewConnection: dart.fnType(dart.legacy(core.bool), []),
    opened: dart.fnType(dart.legacy(core.bool), []),
    shouldClose: dart.fnType(dart.legacy(core.bool), [])
  }));
  dart.setLibraryUri(helper_methods.CacheInfoRepositoryHelperMethods, L1);
  dart.setFieldSignature(helper_methods.CacheInfoRepositoryHelperMethods, () => ({
    __proto__: dart.getFields(helper_methods.CacheInfoRepositoryHelperMethods.__proto__),
    openConnections: dart.fieldType(dart.legacy(core.int)),
    openCompleter: dart.fieldType(dart.legacy(async.Completer$(dart.legacy(core.bool))))
  }));
  var directory = dart.privateName(json_cache_info_repository, "JsonCacheInfoRepository.directory");
  var path$ = dart.privateName(json_cache_info_repository, "JsonCacheInfoRepository.path");
  var databaseName$ = dart.privateName(json_cache_info_repository, "JsonCacheInfoRepository.databaseName");
  var timer = dart.privateName(json_cache_info_repository, "JsonCacheInfoRepository.timer");
  var timerDuration = dart.privateName(json_cache_info_repository, "JsonCacheInfoRepository.timerDuration");
  const CacheInfoRepository_CacheInfoRepositoryHelperMethods$36 = class CacheInfoRepository_CacheInfoRepositoryHelperMethods extends cache_info_repository.CacheInfoRepository {};
  (CacheInfoRepository_CacheInfoRepositoryHelperMethods$36.new = function() {
    helper_methods.CacheInfoRepositoryHelperMethods[dart.mixinNew].call(this);
  }).prototype = CacheInfoRepository_CacheInfoRepositoryHelperMethods$36.prototype;
  dart.applyMixin(CacheInfoRepository_CacheInfoRepositoryHelperMethods$36, helper_methods.CacheInfoRepositoryHelperMethods);
  json_cache_info_repository.JsonCacheInfoRepository = class JsonCacheInfoRepository extends CacheInfoRepository_CacheInfoRepositoryHelperMethods$36 {
    get directory() {
      return this[directory];
    }
    set directory(value) {
      this[directory] = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      this[path$] = value;
    }
    get databaseName() {
      return this[databaseName$];
    }
    set databaseName(value) {
      this[databaseName$] = value;
    }
    get timer() {
      return this[timer];
    }
    set timer(value) {
      this[timer] = value;
    }
    get timerDuration() {
      return this[timerDuration];
    }
    set timerDuration(value) {
      this[timerDuration] = value;
    }
    open() {
      return async.async(boolL(), (function* open() {
        if (!dart.test(this.shouldOpenOnNewConnection())) {
          return this.openCompleter.future;
        }
        let file = (yield this[_getFile]());
        yield this[_readFile](file);
        return this.opened();
      }).bind(this));
    }
    get(key) {
      return async.async(CacheObjectL(), (function* get() {
        return this[_cacheObjects][$values][$firstWhere](dart.fn(element => element.key == key, CacheObjectLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
      }).bind(this));
    }
    getAllObjects() {
      return async.async(ListLOfCacheObjectL(), (function* getAllObjects() {
        return this[_cacheObjects][$values][$toList]();
      }).bind(this));
    }
    insert(cacheObject, opts) {
      let setTouchedToNow = opts && 'setTouchedToNow' in opts ? opts.setTouchedToNow : true;
      return async.async(CacheObjectL(), (function* insert() {
        if (cacheObject.id != null) {
          dart.throw(new core.ArgumentError.new("Inserted objects shouldn't have an existing id."));
        }
        let keys = this[_jsonCache][$keys];
        let lastId = dart.test(keys[$isEmpty]) ? 0 : keys[$reduce](dart.gbind(C1 || CT.C1, intL()));
        let id = dart.notNull(lastId) + 1;
        cacheObject = cacheObject.copyWith({id: id});
        return this[_put](cacheObject, setTouchedToNow);
      }).bind(this));
    }
    update(cacheObject, opts) {
      let setTouchedToNow = opts && 'setTouchedToNow' in opts ? opts.setTouchedToNow : true;
      return async.async(intL(), (function* update() {
        if (cacheObject.id == null) {
          dart.throw(new core.ArgumentError.new("Updated objects should have an existing id."));
        }
        this[_put](cacheObject, setTouchedToNow);
        return 1;
      }).bind(this));
    }
    updateOrInsert(cacheObject) {
      return cacheObject.id == null ? this.insert(cacheObject) : this.update(cacheObject);
    }
    getObjectsOverCapacity(capacity) {
      return async.async(ListLOfCacheObjectL(), (function* getObjectsOverCapacity() {
        let t0;
        let allSorted = (t0 = this[_cacheObjects][$values][$toList](), (() => {
          t0[$sort](dart.fn((c1, c2) => c1.touched.compareTo(c2.touched), CacheObjectLAndCacheObjectLTointL()));
          return t0;
        })());
        if (dart.notNull(allSorted[$length]) <= dart.notNull(capacity)) return JSArrayOfCacheObjectL().of([]);
        return allSorted[$getRange](0, dart.notNull(allSorted[$length]) - dart.notNull(capacity))[$toList]();
      }).bind(this));
    }
    getOldObjects(maxAge) {
      return async.async(ListLOfCacheObjectL(), (function* getOldObjects() {
        let oldestTimestamp = new core.DateTime.now().subtract(maxAge);
        return this[_cacheObjects][$values][$where](dart.fn(element => element.touched.isBefore(oldestTimestamp), CacheObjectLToboolL()))[$toList]();
      }).bind(this));
    }
    delete(id) {
      return async.async(intL(), (function* $delete() {
        let cacheObject = this[_cacheObjects][$values][$firstWhere](dart.fn(element => element.id == id, CacheObjectLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
        if (cacheObject == null) {
          return 0;
        }
        this[_remove](cacheObject);
        return 1;
      }).bind(this));
    }
    deleteAll(ids) {
      return async.async(intL(), (function* deleteAll() {
        let deleted = 0;
        for (let id of ids) {
          deleted = deleted + dart.notNull(yield this.delete(id));
        }
        return deleted;
      }).bind(this));
    }
    close() {
      return async.async(boolL(), (function* close() {
        if (!dart.test(this.shouldClose())) {
          return false;
        }
        yield this[_saveFile]();
        return true;
      }).bind(this));
    }
    [_readFile](file) {
      return async.async(dart.dynamic, (function* _readFile() {
        this[_cacheObjects] = new (IdentityMapOfStringL$CacheObjectL()).new();
        this[_jsonCache] = new (IdentityMapOfintL$MapLOfStringL$dynamic()).new();
        if (dart.test(yield this[_file].exists())) {
          let jsonString = (yield this[_file].readAsString());
          let json = ListL().as(convert.jsonDecode(jsonString));
          for (let element of json) {
            if (!MapLOfStringL$dynamic().is(element)) continue;
            let map = MapLOfStringL$dynamic().as(element);
            let cacheObject = new cache_object.CacheObject.fromMap(map);
            this[_jsonCache][$_set](cacheObject.id, map);
            this[_cacheObjects][$_set](cacheObject.key, cacheObject);
          }
        }
      }).bind(this));
    }
    [_put](cacheObject, setTouchedToNow) {
      this[_jsonCache][$_set](cacheObject.id, cacheObject.toMap({setTouchedToNow: setTouchedToNow}));
      let updatedCacheObject = new cache_object.CacheObject.fromMap(this[_jsonCache][$_get](cacheObject.id));
      this[_cacheObjects][$_set](cacheObject.key, updatedCacheObject);
      this[_cacheUpdated]();
      return updatedCacheObject;
    }
    [_remove](cacheObject) {
      this[_cacheObjects][$remove](cacheObject.key);
      this[_jsonCache][$remove](cacheObject.id);
      this[_cacheUpdated]();
    }
    [_cacheUpdated]() {
      let t0;
      t0 = this.timer;
      t0 == null ? null : t0.cancel();
      this.timer = async.Timer.new(this.timerDuration, dart.bind(this, _saveFile));
    }
    [_saveFile]() {
      return async.async(dart.dynamic, (function* _saveFile() {
        let t0;
        t0 = this.timer;
        t0 == null ? null : t0.cancel();
        this.timer = null;
        yield this[_file].writeAsString(convert.jsonEncode(this[_jsonCache][$values][$toList]()));
      }).bind(this));
    }
    deleteDataFile() {
      return async.async(dart.dynamic, (function* deleteDataFile() {
        let file = (yield this[_getFile]());
        if (dart.test(yield file.exists())) {
          yield file.delete();
        }
      }).bind(this));
    }
    exists() {
      return async.async(boolL(), (function* exists() {
        let file = (yield this[_getFile]());
        return file.exists();
      }).bind(this));
    }
    [_getFile]() {
      return async.async(FileL(), (function* _getFile() {
        if (this[_file] == null) {
          if (this.path != null) {
            this.directory = io.File.new(this.path).parent;
          } else {
            this.directory == null ? this.directory = (yield path_provider.getApplicationSupportDirectory()) : null;
          }
          yield this.directory.create({recursive: true});
          if (this.path == null || !this.path[$endsWith](".json")) {
            this.path = path.join(this.directory.path, dart.str(this.databaseName) + ".json");
          }
          this[_file] = io.File.new(this.path);
        }
        return this[_file];
      }).bind(this));
    }
  };
  (json_cache_info_repository.JsonCacheInfoRepository.new = function(opts) {
    let path = opts && 'path' in opts ? opts.path : null;
    let databaseName = opts && 'databaseName' in opts ? opts.databaseName : null;
    this[directory] = null;
    this[_cacheObjects] = null;
    this[_jsonCache] = null;
    this[timer] = null;
    this[timerDuration] = C0 || CT.C0;
    this[_file] = null;
    this[path$] = path;
    this[databaseName$] = databaseName;
    if (!(path == null || databaseName == null)) dart.assertFailed(null, L0, 23, 16, "path == null || databaseName == null");
    json_cache_info_repository.JsonCacheInfoRepository.__proto__.new.call(this);
    ;
  }).prototype = json_cache_info_repository.JsonCacheInfoRepository.prototype;
  (json_cache_info_repository.JsonCacheInfoRepository.withFile = function(file) {
    this[directory] = null;
    this[_cacheObjects] = null;
    this[_jsonCache] = null;
    this[timer] = null;
    this[timerDuration] = C0 || CT.C0;
    this[databaseName$] = null;
    this[path$] = null;
    if (!(file != null)) dart.assertFailed(null, L0, 28, 16, "file != null");
    this[_file] = file;
    json_cache_info_repository.JsonCacheInfoRepository.__proto__.new.call(this);
    ;
  }).prototype = json_cache_info_repository.JsonCacheInfoRepository.prototype;
  dart.addTypeTests(json_cache_info_repository.JsonCacheInfoRepository);
  dart.addTypeCaches(json_cache_info_repository.JsonCacheInfoRepository);
  dart.setMethodSignature(json_cache_info_repository.JsonCacheInfoRepository, () => ({
    __proto__: dart.getMethods(json_cache_info_repository.JsonCacheInfoRepository.__proto__),
    open: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    get: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject))), [dart.legacy(core.String)]),
    getAllObjects: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(cache_object.CacheObject))))), []),
    insert: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject))), [dart.legacy(cache_object.CacheObject)], {setTouchedToNow: dart.legacy(core.bool)}, {}),
    update: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(cache_object.CacheObject)], {setTouchedToNow: dart.legacy(core.bool)}, {}),
    updateOrInsert: dart.fnType(dart.legacy(async.Future), [dart.legacy(cache_object.CacheObject)]),
    getObjectsOverCapacity: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(cache_object.CacheObject))))), [dart.legacy(core.int)]),
    getOldObjects: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(cache_object.CacheObject))))), [dart.legacy(core.Duration)]),
    delete: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.int)]),
    deleteAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.Iterable$(dart.legacy(core.int)))]),
    close: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    [_readFile]: dart.fnType(dart.legacy(async.Future), [dart.legacy(io.File)]),
    [_put]: dart.fnType(dart.legacy(cache_object.CacheObject), [dart.legacy(cache_object.CacheObject), dart.legacy(core.bool)]),
    [_remove]: dart.fnType(dart.void, [dart.legacy(cache_object.CacheObject)]),
    [_cacheUpdated]: dart.fnType(dart.void, []),
    [_saveFile]: dart.fnType(dart.legacy(async.Future), []),
    deleteDataFile: dart.fnType(dart.legacy(async.Future), []),
    exists: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    [_getFile]: dart.fnType(dart.legacy(async.Future$(dart.legacy(io.File))), [])
  }));
  dart.setLibraryUri(json_cache_info_repository.JsonCacheInfoRepository, L2);
  dart.setFieldSignature(json_cache_info_repository.JsonCacheInfoRepository, () => ({
    __proto__: dart.getFields(json_cache_info_repository.JsonCacheInfoRepository.__proto__),
    directory: dart.fieldType(dart.legacy(io.Directory)),
    path: dart.fieldType(dart.legacy(core.String)),
    databaseName: dart.fieldType(dart.legacy(core.String)),
    [_file]: dart.fieldType(dart.legacy(io.File)),
    [_cacheObjects]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(cache_object.CacheObject)))),
    [_jsonCache]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))))),
    timer: dart.fieldType(dart.legacy(async.Timer)),
    timerDuration: dart.fieldType(dart.legacy(core.Duration))
  }));
  var _path = dart.privateName(cache_object_provider, "_path");
  var _getPath = dart.privateName(cache_object_provider, "_getPath");
  var C2;
  var _migrateOldDbPath = dart.privateName(cache_object_provider, "_migrateOldDbPath");
  var db = dart.privateName(cache_object_provider, "CacheObjectProvider.db");
  var databaseName$0 = dart.privateName(cache_object_provider, "CacheObjectProvider.databaseName");
  const CacheInfoRepository_CacheInfoRepositoryHelperMethods$36$ = class CacheInfoRepository_CacheInfoRepositoryHelperMethods extends cache_info_repository.CacheInfoRepository {};
  (CacheInfoRepository_CacheInfoRepositoryHelperMethods$36$.new = function() {
    helper_methods.CacheInfoRepositoryHelperMethods[dart.mixinNew].call(this);
  }).prototype = CacheInfoRepository_CacheInfoRepositoryHelperMethods$36$.prototype;
  dart.applyMixin(CacheInfoRepository_CacheInfoRepositoryHelperMethods$36$, helper_methods.CacheInfoRepositoryHelperMethods);
  cache_object_provider.CacheObjectProvider = class CacheObjectProvider extends CacheInfoRepository_CacheInfoRepositoryHelperMethods$36$ {
    get db() {
      return this[db];
    }
    set db(value) {
      this[db] = value;
    }
    get databaseName() {
      return this[databaseName$0];
    }
    set databaseName(value) {
      this[databaseName$0] = value;
    }
    open() {
      return async.async(boolL(), (function* open() {
        if (!dart.test(this.shouldOpenOnNewConnection())) {
          return this.openCompleter.future;
        }
        let path = (yield this[_getPath]());
        yield io.File.new(path).parent.create({recursive: true});
        this.db = (yield sqflite.openDatabase(path, {version: 3, onCreate: dart.fn((db, version) => async.async(core.Null, function*() {
            yield db.execute("      create table " + "cacheObject" + " ( \n        " + "_id" + " integer primary key, \n        " + "url" + " text, \n        " + "key" + " text, \n        " + "relativePath" + " text,\n        " + "eTag" + " text,\n        " + "validTill" + " integer,\n        " + "touched" + " integer,\n        " + "length" + " integer\n        );\n        create unique index " + "cacheObject" + "key" + " \n        ON " + "cacheObject" + " (" + "key" + ");\n      ");
          }), DatabaseLAndintLToFutureLOfNullN()), onUpgrade: dart.fn((db, oldVersion, newVersion) => async.async(core.Null, function*() {
            if (dart.notNull(oldVersion) <= 1) {
              let alreadyHasKeyColumn = false;
              try {
                yield db.execute("            alter table " + "cacheObject" + " \n            add " + "key" + " text;\n            ");
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (DatabaseExceptionL().is(e)) {
                  if (!dart.test(e.isDuplicateColumnError("key"))) dart.rethrow(e$);
                  alreadyHasKeyColumn = true;
                } else
                  throw e$;
              }
              yield db.execute("          update " + "cacheObject" + " \n            set " + "key" + " = " + "url" + "\n            where " + "key" + " is null;\n          ");
              if (!alreadyHasKeyColumn) {
                yield db.execute("            create index " + "cacheObject" + "key" + " \n              on " + "cacheObject" + " (" + "key" + ");\n            ");
              }
            }
            if (dart.notNull(oldVersion) <= 2) {
              try {
                yield db.execute("        alter table " + "cacheObject" + " \n        add " + "length" + " integer;\n        ");
              } catch (e$0) {
                let e = dart.getThrown(e$0);
                if (DatabaseExceptionL().is(e)) {
                  if (!dart.test(e.isDuplicateColumnError("length"))) dart.rethrow(e$0);
                } else
                  throw e$0;
              }
            }
          }), DatabaseLAndintLAndintLToFutureLOfNullN())}));
        return this.opened();
      }).bind(this));
    }
    updateOrInsert(cacheObject) {
      if (cacheObject.id == null) {
        return this.insert(cacheObject);
      } else {
        return this.update(cacheObject);
      }
    }
    insert(cacheObject, opts) {
      let setTouchedToNow = opts && 'setTouchedToNow' in opts ? opts.setTouchedToNow : true;
      return async.async(CacheObjectL(), (function* insert() {
        let id = (yield this.db.insert("cacheObject", cacheObject.toMap({setTouchedToNow: setTouchedToNow})));
        return cacheObject.copyWith({id: id});
      }).bind(this));
    }
    get(key) {
      return async.async(CacheObjectL(), (function* get() {
        let maps = (yield this.db.query("cacheObject", {columns: null, where: "key" + " = ?", whereArgs: [key]}));
        if (dart.test(maps[$isNotEmpty])) {
          return new cache_object.CacheObject.fromMap(maps[$first][$cast](StringL(), dart.dynamic));
        }
        return null;
      }).bind(this));
    }
    delete(id) {
      return this.db.delete("cacheObject", {where: "_id" + " = ?", whereArgs: [id]});
    }
    deleteAll(ids) {
      return this.db.delete("cacheObject", {where: "_id" + " IN (" + dart.notNull(ids[$join](",")) + ")"});
    }
    update(cacheObject, opts) {
      let setTouchedToNow = opts && 'setTouchedToNow' in opts ? opts.setTouchedToNow : true;
      return this.db.update("cacheObject", cacheObject.toMap({setTouchedToNow: setTouchedToNow}), {where: "_id" + " = ?", whereArgs: [cacheObject.id]});
    }
    getAllObjects() {
      return async.async(ListLOfCacheObjectL(), (function* getAllObjects() {
        return cache_object.CacheObject.fromMapList(yield this.db.query("cacheObject", {columns: null}));
      }).bind(this));
    }
    getObjectsOverCapacity(capacity) {
      return async.async(ListLOfCacheObjectL(), (function* getObjectsOverCapacity() {
        return cache_object.CacheObject.fromMapList(yield this.db.query("cacheObject", {columns: null, orderBy: "touched" + " DESC", where: "touched" + " < ?", whereArgs: [new core.DateTime.now().subtract(C2 || CT.C2).millisecondsSinceEpoch], limit: 100, offset: capacity}));
      }).bind(this));
    }
    getOldObjects(maxAge) {
      return async.async(ListLOfCacheObjectL(), (function* getOldObjects() {
        return cache_object.CacheObject.fromMapList(yield this.db.query("cacheObject", {where: "touched" + " < ?", columns: null, whereArgs: [new core.DateTime.now().subtract(maxAge).millisecondsSinceEpoch], limit: 100}));
      }).bind(this));
    }
    close() {
      return async.async(boolL(), (function* close() {
        if (!dart.test(this.shouldClose())) return false;
        yield this.db.close();
        return true;
      }).bind(this));
    }
    deleteDataFile() {
      return async.async(dart.dynamic, (function* deleteDataFile() {
        yield this[_getPath]();
      }).bind(this));
    }
    exists() {
      return async.async(boolL(), (function* exists() {
        yield this[_getPath]();
        return io.File.new(this[_path]).exists();
      }).bind(this));
    }
    [_getPath]() {
      return async.async(StringL(), (function* _getPath() {
        let directory = null;
        if (this[_path] != null) {
          directory = io.File.new(this[_path]).parent;
        } else {
          directory = (yield path_provider.getApplicationSupportDirectory());
        }
        yield directory.create({recursive: true});
        if (this[_path] == null || !this[_path][$endsWith](".db")) {
          this[_path] = path.join(directory.path, dart.str(this.databaseName) + ".db");
        }
        yield this[_migrateOldDbPath](this[_path]);
        return this[_path];
      }).bind(this));
    }
    [_migrateOldDbPath](newDbPath) {
      return async.async(dart.dynamic, (function* _migrateOldDbPath() {
        let oldDbPath = path.join(yield sqflite.getDatabasesPath(), dart.str(this.databaseName) + ".db");
        if (oldDbPath != newDbPath && dart.test(yield io.File.new(oldDbPath).exists())) {
          try {
            yield io.File.new(oldDbPath).rename(newDbPath);
          } catch (e) {
            let ex = dart.getThrown(e);
            if (FileSystemExceptionL().is(ex)) {
            } else
              throw e;
          }
        }
      }).bind(this));
    }
  };
  (cache_object_provider.CacheObjectProvider.new = function(opts) {
    let path = opts && 'path' in opts ? opts.path : null;
    let databaseName = opts && 'databaseName' in opts ? opts.databaseName : null;
    this[db] = null;
    this[databaseName$0] = databaseName;
    this[_path] = path;
    cache_object_provider.CacheObjectProvider.__proto__.new.call(this);
    ;
  }).prototype = cache_object_provider.CacheObjectProvider.prototype;
  dart.addTypeTests(cache_object_provider.CacheObjectProvider);
  dart.addTypeCaches(cache_object_provider.CacheObjectProvider);
  dart.setMethodSignature(cache_object_provider.CacheObjectProvider, () => ({
    __proto__: dart.getMethods(cache_object_provider.CacheObjectProvider.__proto__),
    open: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    updateOrInsert: dart.fnType(dart.legacy(async.Future), [dart.legacy(cache_object.CacheObject)]),
    insert: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject))), [dart.legacy(cache_object.CacheObject)], {setTouchedToNow: dart.legacy(core.bool)}, {}),
    get: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject))), [dart.legacy(core.String)]),
    delete: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.int)]),
    deleteAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.Iterable$(dart.legacy(core.int)))]),
    update: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(cache_object.CacheObject)], {setTouchedToNow: dart.legacy(core.bool)}, {}),
    getAllObjects: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(cache_object.CacheObject))))), []),
    getObjectsOverCapacity: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(cache_object.CacheObject))))), [dart.legacy(core.int)]),
    getOldObjects: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(cache_object.CacheObject))))), [dart.legacy(core.Duration)]),
    close: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    deleteDataFile: dart.fnType(dart.legacy(async.Future), []),
    exists: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    [_getPath]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    [_migrateOldDbPath]: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(cache_object_provider.CacheObjectProvider, L3);
  dart.setFieldSignature(cache_object_provider.CacheObjectProvider, () => ({
    __proto__: dart.getFields(cache_object_provider.CacheObjectProvider.__proto__),
    db: dart.fieldType(dart.legacy(sqlite_api.Database)),
    [_path]: dart.fieldType(dart.legacy(core.String)),
    databaseName: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(cache_object_provider, {
    /*cache_object_provider._tableCacheObject*/get _tableCacheObject() {
      return "cacheObject";
    }
  }, true);
  var _config = dart.privateName(cache_manager, "_config");
  var _store = dart.privateName(cache_manager, "_store");
  var _webHelper = dart.privateName(cache_manager, "_webHelper");
  var _pushFileToStream = dart.privateName(cache_manager, "_pushFileToStream");
  var C3;
  cache_manager.CacheManager = class CacheManager extends core.Object {
    get store() {
      return this[_store];
    }
    get webHelper() {
      return this[_webHelper];
    }
    getSingleFile(url, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(FileL$(), (function* getSingleFile() {
        key == null ? key = url : null;
        let cacheFile = (yield this.getFileFromCache(key));
        if (cacheFile != null) {
          if (dart.test(cacheFile.validTill.isBefore(new core.DateTime.now()))) {
            pedantic.unawaited(this.downloadFile(url, {key: key, authHeaders: headers}));
          }
          return cacheFile.file;
        }
        return (yield this.downloadFile(url, {key: key, authHeaders: headers})).file;
      }).bind(this));
    }
    getFile(url, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return this.getFileStream(url, {key: key, withProgress: false}).map(FileInfoL(), dart.fn(r => FileInfoL().as(r), FileResponseLToFileInfoL()));
    }
    getFileStream(url, opts) {
      let t4;
      let key = opts && 'key' in opts ? opts.key : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      let withProgress = opts && 'withProgress' in opts ? opts.withProgress : null;
      key == null ? key = url : null;
      let streamController = StreamControllerOfFileResponseL().new();
      this[_pushFileToStream](streamController, url, key, headers, (t4 = withProgress, t4 == null ? false : t4));
      return streamController.stream;
    }
    [_pushFileToStream](streamController, url, key, headers, withProgress) {
      return async.async(dart.void, (function* _pushFileToStream() {
        key == null ? key = url : null;
        let cacheFile = null;
        try {
          cacheFile = (yield this.getFileFromCache(key));
          if (cacheFile != null) {
            streamController.add(cacheFile);
            withProgress = false;
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          core.print("CacheManager: Failed to load cached file for " + dart.str(url) + " with error:\n" + dart.str(e));
        }
        if (cacheFile == null || dart.test(cacheFile.validTill.isBefore(new core.DateTime.now()))) {
          try {
            let iter = async.StreamIterator.new(this[_webHelper].downloadFile(url, {key: key, authHeaders: headers}));
            try {
              while (yield iter.moveNext()) {
                let response = iter.current;
                {
                  if (DownloadProgressL().is(response) && dart.test(withProgress)) {
                    streamController.add(response);
                  }
                  if (FileInfoL().is(response)) {
                    streamController.add(response);
                  }
                }
              }
            } finally {
              yield iter.cancel();
            }
          } catch (e$0) {
            let e = dart.getThrown(e$0);
            if (!dart.test(dart.fn(() => {
              core.print("CacheManager: Failed to download file from " + dart.str(url) + " with error:\n" + dart.str(e));
              return true;
            }, VoidToboolL())())) dart.assertFailed(null, L4, 153, 16, "() {\n          print(\n              'CacheManager: Failed to download file from $url with error:\\n$e');\n          return true;\n        }()");
            if (cacheFile == null && dart.test(streamController.hasListener)) {
              streamController.addError(e);
            }
          }
        }
        pedantic.unawaited(streamController.close());
      }).bind(this));
    }
    downloadFile(url, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let authHeaders = opts && 'authHeaders' in opts ? opts.authHeaders : null;
      let force = opts && 'force' in opts ? opts.force : false;
      return async.async(FileInfoL(), (function* downloadFile() {
        key == null ? key = url : null;
        let fileResponse = (yield this[_webHelper].downloadFile(url, {key: key, authHeaders: authHeaders, ignoreMemCache: force}).firstWhere(dart.fn(r => FileInfoL().is(r), FileResponseLToboolL())));
        return FileInfoL().as(fileResponse);
      }).bind(this));
    }
    getFileFromCache(key, opts) {
      let ignoreMemCache = opts && 'ignoreMemCache' in opts ? opts.ignoreMemCache : false;
      return this[_store].getFile(key, {ignoreMemCache: ignoreMemCache});
    }
    getFileFromMemory(key) {
      return this[_store].getFileFromMemory(key);
    }
    putFile(url, fileBytes, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let eTag = opts && 'eTag' in opts ? opts.eTag : null;
      let maxAge = opts && 'maxAge' in opts ? opts.maxAge : C3 || CT.C3;
      let fileExtension = opts && 'fileExtension' in opts ? opts.fileExtension : "file";
      return async.async(FileL$(), (function* putFile() {
        key == null ? key = url : null;
        let cacheObject = (yield this[_store].retrieveCacheData(key));
        cacheObject == null ? cacheObject = new cache_object.CacheObject.new(url, {key: key, relativePath: dart.str(new uuid.Uuid.new().v1()) + "." + dart.str(fileExtension)}) : null;
        cacheObject = cacheObject.copyWith({validTill: new core.DateTime.now().add(maxAge), eTag: eTag});
        let file = (yield this[_config].fileSystem.createFile(cacheObject.relativePath));
        yield file.writeAsBytes(fileBytes);
        pedantic.unawaited(this[_store].putFile(cacheObject));
        return file;
      }).bind(this));
    }
    putFileStream(url, source, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let eTag = opts && 'eTag' in opts ? opts.eTag : null;
      let maxAge = opts && 'maxAge' in opts ? opts.maxAge : C3 || CT.C3;
      let fileExtension = opts && 'fileExtension' in opts ? opts.fileExtension : "file";
      return async.async(FileL$(), (function* putFileStream() {
        key == null ? key = url : null;
        let cacheObject = (yield this[_store].retrieveCacheData(key));
        cacheObject == null ? cacheObject = new cache_object.CacheObject.new(url, {key: key, relativePath: dart.str(new uuid.Uuid.new().v1()) + "." + dart.str(fileExtension)}) : null;
        cacheObject = cacheObject.copyWith({validTill: new core.DateTime.now().add(maxAge), eTag: eTag});
        let file = (yield this[_config].fileSystem.createFile(cacheObject.relativePath));
        let sink = file.openWrite();
        yield source.map(ListLOfintL(), dart.fn(event => event, ListLOfintLToListLOfintL())).pipe(sink);
        pedantic.unawaited(this[_store].putFile(cacheObject));
        return file;
      }).bind(this));
    }
    removeFile(key) {
      return async.async(dart.void, (function* removeFile() {
        let cacheObject = (yield this[_store].retrieveCacheData(key));
        if (cacheObject != null) {
          yield this[_store].removeCachedFile(cacheObject);
        }
      }).bind(this));
    }
    emptyCache() {
      return this[_store].emptyCache();
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        yield this[_config].repo.close();
      }).bind(this));
    }
  };
  (cache_manager.CacheManager.new = function(config) {
    this[_config] = null;
    this[_store] = null;
    this[_webHelper] = null;
    this[_config] = config;
    this[_store] = new cache_store.CacheStore.new(config);
    this[_webHelper] = new web_helper.WebHelper.new(this[_store], config.fileService);
  }).prototype = cache_manager.CacheManager.prototype;
  (cache_manager.CacheManager.custom = function(config, opts) {
    let t4, t4$;
    let cacheStore = opts && 'cacheStore' in opts ? opts.cacheStore : null;
    let webHelper = opts && 'webHelper' in opts ? opts.webHelper : null;
    this[_config] = null;
    this[_store] = null;
    this[_webHelper] = null;
    this[_config] = config;
    this[_store] = (t4 = cacheStore, t4 == null ? new cache_store.CacheStore.new(config) : t4);
    this[_webHelper] = (t4$ = webHelper, t4$ == null ? new web_helper.WebHelper.new(this[_store], config.fileService) : t4$);
  }).prototype = cache_manager.CacheManager.prototype;
  dart.addTypeTests(cache_manager.CacheManager);
  dart.addTypeCaches(cache_manager.CacheManager);
  cache_manager.CacheManager[dart.implements] = () => [base_cache_manager.BaseCacheManager];
  dart.setMethodSignature(cache_manager.CacheManager, () => ({
    __proto__: dart.getMethods(cache_manager.CacheManager.__proto__),
    getSingleFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(file.File))), [dart.legacy(core.String)], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), key: dart.legacy(core.String)}, {}),
    getFile: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), key: dart.legacy(core.String)}, {}),
    getFileStream: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_response.FileResponse))), [dart.legacy(core.String)], {headers: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), key: dart.legacy(core.String), withProgress: dart.legacy(core.bool)}, {}),
    [_pushFileToStream]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(async.StreamController), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), dart.legacy(core.bool)]),
    downloadFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)], {authHeaders: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), force: dart.legacy(core.bool), key: dart.legacy(core.String)}, {}),
    getFileFromCache: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)], {ignoreMemCache: dart.legacy(core.bool)}, {}),
    getFileFromMemory: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)]),
    putFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(file.File))), [dart.legacy(core.String), dart.legacy(typed_data.Uint8List)], {eTag: dart.legacy(core.String), fileExtension: dart.legacy(core.String), key: dart.legacy(core.String), maxAge: dart.legacy(core.Duration)}, {}),
    putFileStream: dart.fnType(dart.legacy(async.Future$(dart.legacy(file.File))), [dart.legacy(core.String), dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(core.int)))))], {eTag: dart.legacy(core.String), fileExtension: dart.legacy(core.String), key: dart.legacy(core.String), maxAge: dart.legacy(core.Duration)}, {}),
    removeFile: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)]),
    emptyCache: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    dispose: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setGetterSignature(cache_manager.CacheManager, () => ({
    __proto__: dart.getGetters(cache_manager.CacheManager.__proto__),
    store: dart.legacy(cache_store.CacheStore),
    webHelper: dart.legacy(web_helper.WebHelper)
  }));
  dart.setLibraryUri(cache_manager.CacheManager, L5);
  dart.setFieldSignature(cache_manager.CacheManager, () => ({
    __proto__: dart.getFields(cache_manager.CacheManager.__proto__),
    [_config]: dart.fieldType(dart.legacy(config.Config)),
    [_store]: dart.fieldType(dart.legacy(cache_store.CacheStore)),
    [_webHelper]: dart.fieldType(dart.legacy(web_helper.WebHelper))
  }));
  default_cache_manager.DefaultCacheManager = class DefaultCacheManager extends cache_manager.CacheManager {
    static new() {
      default_cache_manager.DefaultCacheManager._instance == null ? default_cache_manager.DefaultCacheManager._instance = new default_cache_manager.DefaultCacheManager.__() : null;
      return default_cache_manager.DefaultCacheManager._instance;
    }
  };
  (default_cache_manager.DefaultCacheManager.__ = function() {
    default_cache_manager.DefaultCacheManager.__proto__.new.call(this, new _config_web.Config.new("libCachedImageData"));
    ;
  }).prototype = default_cache_manager.DefaultCacheManager.prototype;
  dart.addTypeTests(default_cache_manager.DefaultCacheManager);
  dart.addTypeCaches(default_cache_manager.DefaultCacheManager);
  dart.setLibraryUri(default_cache_manager.DefaultCacheManager, L6);
  dart.defineLazy(default_cache_manager.DefaultCacheManager, {
    /*default_cache_manager.DefaultCacheManager.key*/get key() {
      return "libCachedImageData";
    },
    /*default_cache_manager.DefaultCacheManager._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, true);
  var _queue = dart.privateName(web_helper, "_queue");
  var _store$ = dart.privateName(web_helper, "_store");
  var _memCache = dart.privateName(web_helper, "_memCache");
  var _downloadOrAddToQueue = dart.privateName(web_helper, "_downloadOrAddToQueue");
  var _updateFile = dart.privateName(web_helper, "_updateFile");
  var _checkQueue = dart.privateName(web_helper, "_checkQueue");
  var _download = dart.privateName(web_helper, "_download");
  var _manageResponse = dart.privateName(web_helper, "_manageResponse");
  var _setDataFromHeaders = dart.privateName(web_helper, "_setDataFromHeaders");
  var _saveFile$ = dart.privateName(web_helper, "_saveFile");
  var _removeOldFile = dart.privateName(web_helper, "_removeOldFile");
  var _saveFileAndPostUpdates = dart.privateName(web_helper, "_saveFileAndPostUpdates");
  var fileFetcher$ = dart.privateName(web_helper, "WebHelper.fileFetcher");
  var concurrentCalls = dart.privateName(web_helper, "WebHelper.concurrentCalls");
  web_helper.WebHelper = class WebHelper extends core.Object {
    get fileFetcher() {
      return this[fileFetcher$];
    }
    set fileFetcher(value) {
      super.fileFetcher = value;
    }
    get concurrentCalls() {
      return this[concurrentCalls];
    }
    set concurrentCalls(value) {
      this[concurrentCalls] = value;
    }
    downloadFile(url, opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let authHeaders = opts && 'authHeaders' in opts ? opts.authHeaders : null;
      let ignoreMemCache = opts && 'ignoreMemCache' in opts ? opts.ignoreMemCache : false;
      key == null ? key = url : null;
      if (!dart.test(this[_memCache][$containsKey](key)) || dart.test(ignoreMemCache)) {
        let subject = BehaviorSubjectOfFileResponseL().new();
        this[_memCache][$_set](key, subject);
        pedantic.unawaited(this[_downloadOrAddToQueue](url, key, authHeaders));
      }
      return this[_memCache][$_get](key).stream;
    }
    [_downloadOrAddToQueue](url, key, authHeaders) {
      return async.async(dart.void, (function* _downloadOrAddToQueue() {
        if (dart.notNull(this.concurrentCalls) >= dart.notNull(this.fileFetcher.concurrentFetches)) {
          this[_queue].add(new queue_item.QueueItem.new(url, key, authHeaders));
          return;
        }
        this.concurrentCalls = dart.notNull(this.concurrentCalls) + 1;
        let subject = this[_memCache][$_get](key);
        try {
          let iter = async.StreamIterator.new(this[_updateFile](url, key, {authHeaders: authHeaders}));
          try {
            while (yield iter.moveNext()) {
              let result = iter.current;
              {
                subject.add(result);
              }
            }
          } finally {
            yield iter.cancel();
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stackTrace = dart.stackTrace(e$);
          subject.addError(e, stackTrace);
        } finally {
          this.concurrentCalls = dart.notNull(this.concurrentCalls) - 1;
          yield subject.close();
          this[_memCache][$remove](key);
          this[_checkQueue]();
        }
      }).bind(this));
    }
    [_checkQueue]() {
      if (dart.test(this[_queue][$isEmpty])) return;
      let next = this[_queue].removeFirst();
      this[_downloadOrAddToQueue](next.url, next.key, next.headers);
    }
    [_updateFile](url, key, opts) {
      let authHeaders = opts && 'authHeaders' in opts ? opts.authHeaders : null;
      return new (_AsyncStarImplOfFileResponseL()).new((function* _updateFile(stream) {
        let cacheObject = (yield this[_store$].retrieveCacheData(key));
        cacheObject = cacheObject == null ? new cache_object.CacheObject.new(url, {key: key}) : cacheObject.copyWith({url: url});
        let response = (yield this[_download](cacheObject, authHeaders));
        if (stream.addStream(this[_manageResponse](cacheObject, response))) return;
        yield;
      }).bind(this)).stream;
    }
    [_download](cacheObject, authHeaders) {
      let headers = new (IdentityMapOfStringL$StringL()).new();
      if (authHeaders != null) {
        headers[$addAll](authHeaders);
      }
      if (cacheObject.eTag != null) {
        headers[$_set]("if-none-match", cacheObject.eTag);
      }
      return this.fileFetcher.get(cacheObject.url, {headers: headers});
    }
    [_manageResponse](cacheObject, response) {
      return new (_AsyncStarImplOfFileResponseL()).new((function* _manageResponse(stream) {
        let t7;
        let hasNewFile = web_helper.statusCodesNewFile[$contains](response.statusCode);
        let keepOldFile = web_helper.statusCodesFileNotChanged[$contains](response.statusCode);
        if (!dart.test(hasNewFile) && !dart.test(keepOldFile)) {
          dart.throw(new web_helper.HttpExceptionWithStatus.new(response.statusCode, "Invalid statusCode: " + dart.str((t7 = response, t7 == null ? null : t7.statusCode)), {uri: core.Uri.parse(cacheObject.url)}));
        }
        let oldCacheObject = cacheObject;
        let newCacheObject = this[_setDataFromHeaders](cacheObject, response);
        if (dart.test(web_helper.statusCodesNewFile[$contains](response.statusCode))) {
          let savedBytes = null;
          let iter = async.StreamIterator.new(this[_saveFile$](newCacheObject, response));
          try {
            while (yield iter.moveNext()) {
              let progress = iter.current;
              {
                savedBytes = progress;
                if (stream.add(new download_progress.DownloadProgress.new(cacheObject.url, response.contentLength, progress))) return;
                yield;
              }
            }
          } finally {
            yield iter.cancel();
          }
          newCacheObject = newCacheObject.copyWith({length: savedBytes});
        }
        pedantic.unawaited(this[_store$].putFile(newCacheObject).then(dart.void, dart.fn(_ => {
          if (newCacheObject.relativePath != oldCacheObject.relativePath) {
            this[_removeOldFile](oldCacheObject.relativePath);
          }
        }, voidToNullN())));
        let file = (yield this[_store$].fileSystem.createFile(newCacheObject.relativePath));
        if (stream.add(new file_info.FileInfo.new(file, file_info.FileSource.Online, newCacheObject.validTill, newCacheObject.url))) return;
        yield;
      }).bind(this)).stream;
    }
    [_setDataFromHeaders](cacheObject, response) {
      let t7;
      let fileExtension = response.fileExtension;
      let filePath = cacheObject.relativePath;
      if (filePath != null && !dart.test(web_helper.statusCodesFileNotChanged[$contains](response.statusCode))) {
        if (!filePath[$endsWith](fileExtension)) {
          pedantic.unawaited(this[_removeOldFile](filePath));
        }
        filePath = null;
      }
      return cacheObject.copyWith({relativePath: (t7 = filePath, t7 == null ? dart.str(new uuid.Uuid.new().v1()) + dart.str(fileExtension) : t7), validTill: response.validTill, eTag: response.eTag});
    }
    [_saveFile$](cacheObject, response) {
      let receivedBytesResultController = StreamControllerOfintL().new();
      pedantic.unawaited(this[_saveFileAndPostUpdates](receivedBytesResultController, cacheObject, response));
      return receivedBytesResultController.stream;
    }
    [_saveFileAndPostUpdates](receivedBytesResultController, cacheObject, response) {
      return async.async(dart.dynamic, (function* _saveFileAndPostUpdates() {
        let file = (yield this[_store$].fileSystem.createFile(cacheObject.relativePath));
        try {
          let receivedBytes = 0;
          let sink = file.openWrite();
          yield response.content.map(ListLOfintL(), dart.fn(s => {
            receivedBytes = receivedBytes + dart.notNull(s[$length]);
            receivedBytesResultController.add(receivedBytes);
            return s;
          }, ListLOfintLToListLOfintL())).pipe(sink);
        } catch (e$) {
          let e = dart.getThrown(e$);
          let stacktrace = dart.stackTrace(e$);
          receivedBytesResultController.addError(e, stacktrace);
        }
        yield receivedBytesResultController.close();
      }).bind(this));
    }
    [_removeOldFile](relativePath) {
      return async.async(dart.void, (function* _removeOldFile() {
        if (relativePath == null) return;
        let file = (yield this[_store$].fileSystem.createFile(relativePath));
        if (dart.test(yield file.exists())) {
          yield file.delete();
        }
      }).bind(this));
    }
  };
  (web_helper.WebHelper.new = function(_store, fileFetcher) {
    let t6;
    this[_queue] = new (ListQueueOfQueueItemL()).new();
    this[concurrentCalls] = 0;
    this[_store$] = _store;
    this[_memCache] = new (IdentityMapOfStringL$BehaviorSubjectLOfFileResponseL()).new();
    this[fileFetcher$] = (t6 = fileFetcher, t6 == null ? new file_service.HttpFileService.new() : t6);
    ;
  }).prototype = web_helper.WebHelper.prototype;
  dart.addTypeTests(web_helper.WebHelper);
  dart.addTypeCaches(web_helper.WebHelper);
  dart.setMethodSignature(web_helper.WebHelper, () => ({
    __proto__: dart.getMethods(web_helper.WebHelper.__proto__),
    downloadFile: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_response.FileResponse))), [dart.legacy(core.String)], {authHeaders: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), ignoreMemCache: dart.legacy(core.bool), key: dart.legacy(core.String)}, {}),
    [_downloadOrAddToQueue]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))]),
    [_checkQueue]: dart.fnType(dart.void, []),
    [_updateFile]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_response.FileResponse))), [dart.legacy(core.String), dart.legacy(core.String)], {authHeaders: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))}, {}),
    [_download]: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_service.FileServiceResponse))), [dart.legacy(cache_object.CacheObject), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))]),
    [_manageResponse]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(file_response.FileResponse))), [dart.legacy(cache_object.CacheObject), dart.legacy(file_service.FileServiceResponse)]),
    [_setDataFromHeaders]: dart.fnType(dart.legacy(cache_object.CacheObject), [dart.legacy(cache_object.CacheObject), dart.legacy(file_service.FileServiceResponse)]),
    [_saveFile$]: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.int))), [dart.legacy(cache_object.CacheObject), dart.legacy(file_service.FileServiceResponse)]),
    [_saveFileAndPostUpdates]: dart.fnType(dart.legacy(async.Future), [dart.legacy(async.StreamController$(dart.legacy(core.int))), dart.legacy(cache_object.CacheObject), dart.legacy(file_service.FileServiceResponse)]),
    [_removeOldFile]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(web_helper.WebHelper, L7);
  dart.setFieldSignature(web_helper.WebHelper, () => ({
    __proto__: dart.getFields(web_helper.WebHelper.__proto__),
    [_store$]: dart.finalFieldType(dart.legacy(cache_store.CacheStore)),
    fileFetcher: dart.finalFieldType(dart.legacy(file_service.FileService)),
    [_memCache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(behavior_subject.BehaviorSubject$(dart.legacy(file_response.FileResponse)))))),
    [_queue]: dart.finalFieldType(dart.legacy(collection.Queue$(dart.legacy(queue_item.QueueItem)))),
    concurrentCalls: dart.fieldType(dart.legacy(core.int))
  }));
  var statusCode$ = dart.privateName(web_helper, "HttpExceptionWithStatus.statusCode");
  web_helper.HttpExceptionWithStatus = class HttpExceptionWithStatus extends _http.HttpException {
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
  };
  (web_helper.HttpExceptionWithStatus.new = function(statusCode, message, opts) {
    let uri = opts && 'uri' in opts ? opts.uri : null;
    this[statusCode$] = statusCode;
    web_helper.HttpExceptionWithStatus.__proto__.new.call(this, message, {uri: uri});
    ;
  }).prototype = web_helper.HttpExceptionWithStatus.prototype;
  dart.addTypeTests(web_helper.HttpExceptionWithStatus);
  dart.addTypeCaches(web_helper.HttpExceptionWithStatus);
  dart.setLibraryUri(web_helper.HttpExceptionWithStatus, L7);
  dart.setFieldSignature(web_helper.HttpExceptionWithStatus, () => ({
    __proto__: dart.getFields(web_helper.HttpExceptionWithStatus.__proto__),
    statusCode: dart.finalFieldType(dart.legacy(core.int))
  }));
  var C4;
  var C5;
  dart.defineLazy(web_helper, {
    /*web_helper.statusCodesNewFile*/get statusCodesNewFile() {
      return C4 || CT.C4;
    },
    /*web_helper.statusCodesFileNotChanged*/get statusCodesFileNotChanged() {
      return C5 || CT.C5;
    }
  }, true);
  var repo$ = dart.privateName(_config_web, "Config.repo");
  var fileSystem$ = dart.privateName(_config_web, "Config.fileSystem");
  var cacheKey$ = dart.privateName(_config_web, "Config.cacheKey");
  var stalePeriod$ = dart.privateName(_config_web, "Config.stalePeriod");
  var maxNrOfCacheObjects$ = dart.privateName(_config_web, "Config.maxNrOfCacheObjects");
  var fileService$ = dart.privateName(_config_web, "Config.fileService");
  _config_web.Config = class Config extends core.Object {
    get repo() {
      return this[repo$];
    }
    set repo(value) {
      super.repo = value;
    }
    get fileSystem() {
      return this[fileSystem$];
    }
    set fileSystem(value) {
      super.fileSystem = value;
    }
    get cacheKey() {
      return this[cacheKey$];
    }
    set cacheKey(value) {
      super.cacheKey = value;
    }
    get stalePeriod() {
      return this[stalePeriod$];
    }
    set stalePeriod(value) {
      super.stalePeriod = value;
    }
    get maxNrOfCacheObjects() {
      return this[maxNrOfCacheObjects$];
    }
    set maxNrOfCacheObjects(value) {
      super.maxNrOfCacheObjects = value;
    }
    get fileService() {
      return this[fileService$];
    }
    set fileService(value) {
      super.fileService = value;
    }
  };
  (_config_web.Config.new = function(cacheKey, opts) {
    let t8, t8$, t8$0, t8$1, t8$2;
    let stalePeriod = opts && 'stalePeriod' in opts ? opts.stalePeriod : null;
    let maxNrOfCacheObjects = opts && 'maxNrOfCacheObjects' in opts ? opts.maxNrOfCacheObjects : null;
    let repo = opts && 'repo' in opts ? opts.repo : null;
    let fileSystem = opts && 'fileSystem' in opts ? opts.fileSystem : null;
    let fileService = opts && 'fileService' in opts ? opts.fileService : null;
    this[cacheKey$] = cacheKey;
    this[stalePeriod$] = (t8 = stalePeriod, t8 == null ? C3 || CT.C3 : t8);
    this[maxNrOfCacheObjects$] = (t8$ = maxNrOfCacheObjects, t8$ == null ? 200 : t8$);
    this[repo$] = (t8$0 = repo, t8$0 == null ? new non_storing_object_provider.NonStoringObjectProvider.new() : t8$0);
    this[fileSystem$] = (t8$1 = fileSystem, t8$1 == null ? new file_system_web.MemoryCacheSystem.new() : t8$1);
    this[fileService$] = (t8$2 = fileService, t8$2 == null ? new file_service.HttpFileService.new() : t8$2);
    ;
  }).prototype = _config_web.Config.prototype;
  dart.addTypeTests(_config_web.Config);
  dart.addTypeCaches(_config_web.Config);
  _config_web.Config[dart.implements] = () => [config.Config];
  dart.setLibraryUri(_config_web.Config, L8);
  dart.setFieldSignature(_config_web.Config, () => ({
    __proto__: dart.getFields(_config_web.Config.__proto__),
    repo: dart.finalFieldType(dart.legacy(cache_info_repository.CacheInfoRepository)),
    fileSystem: dart.finalFieldType(dart.legacy(file_system.FileSystem)),
    cacheKey: dart.finalFieldType(dart.legacy(core.String)),
    stalePeriod: dart.finalFieldType(dart.legacy(core.Duration)),
    maxNrOfCacheObjects: dart.finalFieldType(dart.legacy(core.int)),
    fileService: dart.finalFieldType(dart.legacy(file_service.FileService))
  }));
  config.Config = class Config extends core.Object {};
  (config.Config[dart.mixinNew] = function() {
  }).prototype = config.Config.prototype;
  dart.addTypeTests(config.Config);
  dart.addTypeCaches(config.Config);
  dart.setLibraryUri(config.Config, L9);
  var C6;
  var _futureCache = dart.privateName(cache_store, "_futureCache");
  var _memCache$ = dart.privateName(cache_store, "_memCache");
  var _cacheInfoRepository = dart.privateName(cache_store, "_cacheInfoRepository");
  var _scheduledCleanup = dart.privateName(cache_store, "_scheduledCleanup");
  var _config$ = dart.privateName(cache_store, "_config");
  var _capacity = dart.privateName(cache_store, "_capacity");
  var _maxAge = dart.privateName(cache_store, "_maxAge");
  var _updateCacheDataInDatabase = dart.privateName(cache_store, "_updateCacheDataInDatabase");
  var _fileExists = dart.privateName(cache_store, "_fileExists");
  var _getCacheDataFromDatabase = dart.privateName(cache_store, "_getCacheDataFromDatabase");
  var _scheduleCleanup = dart.privateName(cache_store, "_scheduleCleanup");
  var _cleanupCache = dart.privateName(cache_store, "_cleanupCache");
  var _removeCachedFile = dart.privateName(cache_store, "_removeCachedFile");
  var cleanupRunMinInterval = dart.privateName(cache_store, "CacheStore.cleanupRunMinInterval");
  var fileSystem = dart.privateName(cache_store, "CacheStore.fileSystem");
  var lastCleanupRun = dart.privateName(cache_store, "CacheStore.lastCleanupRun");
  cache_store.CacheStore = class CacheStore extends core.Object {
    get cleanupRunMinInterval() {
      return this[cleanupRunMinInterval];
    }
    set cleanupRunMinInterval(value) {
      this[cleanupRunMinInterval] = value;
    }
    get fileSystem() {
      return this[fileSystem];
    }
    set fileSystem(value) {
      this[fileSystem] = value;
    }
    get lastCleanupRun() {
      return this[lastCleanupRun];
    }
    set lastCleanupRun(value) {
      this[lastCleanupRun] = value;
    }
    get storeKey() {
      return this[_config$].cacheKey;
    }
    get [_capacity]() {
      return this[_config$].maxNrOfCacheObjects;
    }
    get [_maxAge]() {
      return this[_config$].stalePeriod;
    }
    getFile(key, opts) {
      let ignoreMemCache = opts && 'ignoreMemCache' in opts ? opts.ignoreMemCache : false;
      return async.async(FileInfoL(), (function* getFile() {
        let cacheObject = (yield this.retrieveCacheData(key, {ignoreMemCache: ignoreMemCache}));
        if (cacheObject == null || cacheObject.relativePath == null) {
          return null;
        }
        let file = (yield this.fileSystem.createFile(cacheObject.relativePath));
        return new file_info.FileInfo.new(file, file_info.FileSource.Cache, cacheObject.validTill, cacheObject.url);
      }).bind(this));
    }
    putFile(cacheObject) {
      return async.async(dart.void, (function* putFile() {
        this[_memCache$][$_set](cacheObject.key, cacheObject);
        yield this[_updateCacheDataInDatabase](cacheObject);
      }).bind(this));
    }
    retrieveCacheData(key, opts) {
      let ignoreMemCache = opts && 'ignoreMemCache' in opts ? opts.ignoreMemCache : false;
      return async.async(CacheObjectL(), (function* retrieveCacheData() {
        if (!dart.test(ignoreMemCache) && dart.test(this[_memCache$][$containsKey](key))) {
          if (dart.test(yield this[_fileExists](this[_memCache$][$_get](key)))) {
            return this[_memCache$][$_get](key);
          }
        }
        if (!dart.test(this[_futureCache][$containsKey](key))) {
          let completer = CompleterOfCacheObjectL().new();
          pedantic.unawaited(this[_getCacheDataFromDatabase](key).then(dart.void, dart.fn(cacheObject => async.async(core.Null, (function*() {
            if (cacheObject != null && !dart.test(yield this[_fileExists](cacheObject))) {
              let provider = (yield this[_cacheInfoRepository]);
              yield provider.delete(cacheObject.id);
              cacheObject = null;
            }
            this[_memCache$][$_set](key, cacheObject);
            completer.complete(cacheObject);
            pedantic.unawaited(this[_futureCache][$remove](key));
          }).bind(this)), CacheObjectLToFutureLOfNullN())));
          this[_futureCache][$_set](key, completer.future);
        }
        return this[_futureCache][$_get](key);
      }).bind(this));
    }
    getFileFromMemory(key) {
      return async.async(FileInfoL(), (function* getFileFromMemory() {
        if (this[_memCache$][$_get](key) == null) {
          return null;
        }
        let cacheObject = this[_memCache$][$_get](key);
        let file = (yield this.fileSystem.createFile(cacheObject.relativePath));
        return new file_info.FileInfo.new(file, file_info.FileSource.Cache, cacheObject.validTill, cacheObject.url);
      }).bind(this));
    }
    [_fileExists](cacheObject) {
      return async.async(boolL(), (function* _fileExists() {
        let t8;
        if ((t8 = cacheObject, t8 == null ? null : t8.relativePath) == null) {
          return false;
        }
        let file = (yield this.fileSystem.createFile(cacheObject.relativePath));
        return file.exists();
      }).bind(this));
    }
    [_getCacheDataFromDatabase](key) {
      return async.async(CacheObjectL(), (function* _getCacheDataFromDatabase() {
        let provider = (yield this[_cacheInfoRepository]);
        let data = (yield provider.get(key));
        if (dart.test(yield this[_fileExists](data))) {
          pedantic.unawaited(this[_updateCacheDataInDatabase](data));
        }
        this[_scheduleCleanup]();
        return data;
      }).bind(this));
    }
    [_scheduleCleanup]() {
      if (this[_scheduledCleanup] != null) {
        return;
      }
      this[_scheduledCleanup] = async.Timer.new(this.cleanupRunMinInterval, dart.fn(() => {
        this[_scheduledCleanup] = null;
        this[_cleanupCache]();
      }, VoidToNullN()));
    }
    [_updateCacheDataInDatabase](cacheObject) {
      return async.async(dart.dynamic, (function* _updateCacheDataInDatabase() {
        let provider = (yield this[_cacheInfoRepository]);
        return provider.updateOrInsert(cacheObject);
      }).bind(this));
    }
    [_cleanupCache]() {
      return async.async(dart.void, (function* _cleanupCache() {
        let toRemove = JSArrayOfintL().of([]);
        let provider = (yield this[_cacheInfoRepository]);
        let overCapacity = (yield provider.getObjectsOverCapacity(this[_capacity]));
        for (let cacheObject of overCapacity) {
          pedantic.unawaited(this[_removeCachedFile](cacheObject, toRemove));
        }
        let oldObjects = (yield provider.getOldObjects(this[_maxAge]));
        for (let cacheObject of oldObjects) {
          pedantic.unawaited(this[_removeCachedFile](cacheObject, toRemove));
        }
        yield provider.deleteAll(toRemove);
      }).bind(this));
    }
    emptyCache() {
      return async.async(dart.void, (function* emptyCache() {
        let provider = (yield this[_cacheInfoRepository]);
        let toRemove = JSArrayOfintL().of([]);
        let allObjects = (yield provider.getAllObjects());
        for (let cacheObject of allObjects) {
          pedantic.unawaited(this[_removeCachedFile](cacheObject, toRemove));
        }
        yield provider.deleteAll(toRemove);
      }).bind(this));
    }
    emptyMemoryCache() {
      this[_memCache$][$clear]();
    }
    removeCachedFile(cacheObject) {
      return async.async(dart.void, (function* removeCachedFile() {
        let provider = (yield this[_cacheInfoRepository]);
        let toRemove = JSArrayOfintL().of([]);
        pedantic.unawaited(this[_removeCachedFile](cacheObject, toRemove));
        yield provider.deleteAll(toRemove);
      }).bind(this));
    }
    [_removeCachedFile](cacheObject, toRemove) {
      return async.async(dart.void, (function* _removeCachedFile() {
        if (dart.test(toRemove[$contains](cacheObject.id))) return;
        toRemove[$add](cacheObject.id);
        if (dart.test(this[_memCache$][$containsKey](cacheObject.key))) {
          this[_memCache$][$remove](cacheObject.key);
        }
        if (dart.test(this[_futureCache][$containsKey](cacheObject.key))) {
          pedantic.unawaited(this[_futureCache][$remove](cacheObject.key));
        }
        let file = (yield this.fileSystem.createFile(cacheObject.relativePath));
        if (dart.test(yield file.exists())) {
          pedantic.unawaited(file.delete());
        }
      }).bind(this));
    }
    dispose() {
      return async.async(dart.void, (function* dispose() {
        let provider = (yield this[_cacheInfoRepository]);
        yield provider.close();
      }).bind(this));
    }
  };
  (cache_store.CacheStore.new = function(config) {
    this[cleanupRunMinInterval] = C6 || CT.C6;
    this[_futureCache] = new (IdentityMapOfStringL$FutureLOfCacheObjectL()).new();
    this[_memCache$] = new (IdentityMapOfStringL$CacheObjectL()).new();
    this[fileSystem] = null;
    this[_cacheInfoRepository] = null;
    this[lastCleanupRun] = new core.DateTime.now();
    this[_scheduledCleanup] = null;
    this[_config$] = config;
    this.fileSystem = config.fileSystem;
    this[_cacheInfoRepository] = config.repo.open().then(CacheInfoRepositoryL(), dart.fn(value => config.repo, boolLToCacheInfoRepositoryL()));
  }).prototype = cache_store.CacheStore.prototype;
  dart.addTypeTests(cache_store.CacheStore);
  dart.addTypeCaches(cache_store.CacheStore);
  dart.setMethodSignature(cache_store.CacheStore, () => ({
    __proto__: dart.getMethods(cache_store.CacheStore.__proto__),
    getFile: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)], {ignoreMemCache: dart.legacy(core.bool)}, {}),
    putFile: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cache_object.CacheObject)]),
    retrieveCacheData: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject))), [dart.legacy(core.String)], {ignoreMemCache: dart.legacy(core.bool)}, {}),
    getFileFromMemory: dart.fnType(dart.legacy(async.Future$(dart.legacy(file_info.FileInfo))), [dart.legacy(core.String)]),
    [_fileExists]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(cache_object.CacheObject)]),
    [_getCacheDataFromDatabase]: dart.fnType(dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject))), [dart.legacy(core.String)]),
    [_scheduleCleanup]: dart.fnType(dart.void, []),
    [_updateCacheDataInDatabase]: dart.fnType(dart.legacy(async.Future), [dart.legacy(cache_object.CacheObject)]),
    [_cleanupCache]: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    emptyCache: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    emptyMemoryCache: dart.fnType(dart.void, []),
    removeCachedFile: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cache_object.CacheObject)]),
    [_removeCachedFile]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(cache_object.CacheObject), dart.legacy(core.List$(dart.legacy(core.int)))]),
    dispose: dart.fnType(dart.legacy(async.Future$(dart.void)), [])
  }));
  dart.setGetterSignature(cache_store.CacheStore, () => ({
    __proto__: dart.getGetters(cache_store.CacheStore.__proto__),
    storeKey: dart.legacy(core.String),
    [_capacity]: dart.legacy(core.int),
    [_maxAge]: dart.legacy(core.Duration)
  }));
  dart.setLibraryUri(cache_store.CacheStore, L10);
  dart.setFieldSignature(cache_store.CacheStore, () => ({
    __proto__: dart.getFields(cache_store.CacheStore.__proto__),
    cleanupRunMinInterval: dart.fieldType(dart.legacy(core.Duration)),
    [_futureCache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(async.Future$(dart.legacy(cache_object.CacheObject)))))),
    [_memCache$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(cache_object.CacheObject)))),
    fileSystem: dart.fieldType(dart.legacy(file_system.FileSystem)),
    [_config$]: dart.finalFieldType(dart.legacy(config.Config)),
    [_cacheInfoRepository]: dart.fieldType(dart.legacy(async.Future$(dart.legacy(cache_info_repository.CacheInfoRepository)))),
    lastCleanupRun: dart.fieldType(dart.legacy(core.DateTime)),
    [_scheduledCleanup]: dart.fieldType(dart.legacy(async.Timer))
  }));
  dart.trackLibraries("packages/flutter_cache_manager/src/storage/cache_info_repositories/json_cache_info_repository.dart", {
    "package:flutter_cache_manager/src/storage/cache_info_repositories/json_cache_info_repository.dart": json_cache_info_repository,
    "package:flutter_cache_manager/src/storage/cache_info_repositories/helper_methods.dart": helper_methods,
    "package:flutter_cache_manager/src/storage/cache_info_repositories/cache_object_provider.dart": cache_object_provider,
    "package:flutter_cache_manager/src/storage/cache_info_repositories/cache_info_repositories.dart": cache_info_repositories,
    "package:flutter_cache_manager/src/cache_managers/default_cache_manager.dart": default_cache_manager,
    "package:flutter_cache_manager/src/cache_managers/cache_managers.dart": cache_managers,
    "package:flutter_cache_manager/src/web/web_helper.dart": web_helper,
    "package:flutter_cache_manager/src/config/_config_web.dart": _config_web,
    "package:flutter_cache_manager/src/config/config.dart": config,
    "package:flutter_cache_manager/src/cache_store.dart": cache_store,
    "package:flutter_cache_manager/src/cache_manager.dart": cache_manager,
    "package:flutter_cache_manager/flutter_cache_manager.dart": flutter_cache_manager
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["helper_methods.dart","json_cache_info_repository.dart","cache_object_provider.dart","../../cache_manager.dart","../../cache_managers/default_cache_manager.dart","../../web/web_helper.dart","../../config/_config_web.dart","../../cache_store.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/flutter_cache_manager/src/storage/cache_info_repositories/json_cache_info_repository.dart.lib.js"}');
  // Exports:
  return {
    src__storage__cache_info_repositories__json_cache_info_repository: json_cache_info_repository,
    src__storage__cache_info_repositories__helper_methods: helper_methods,
    src__storage__cache_info_repositories__cache_object_provider: cache_object_provider,
    src__storage__cache_info_repositories__cache_info_repositories: cache_info_repositories,
    src__cache_managers__default_cache_manager: default_cache_manager,
    src__cache_managers__cache_managers: cache_managers,
    src__web__web_helper: web_helper,
    src__config___config_web: _config_web,
    src__config__config: config,
    src__cache_store: cache_store,
    src__cache_manager: cache_manager,
    flutter_cache_manager: flutter_cache_manager
  };
}));

//# sourceMappingURL=json_cache_info_repository.dart.lib.js.map
