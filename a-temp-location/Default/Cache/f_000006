define(['dart_sdk', 'packages/video_player_platform_interface/messages.dart', 'packages/flutter/src/widgets/texture.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/flutter/src/foundation/collections.dart'], (function load__packages__video_player_platform_interface__method_channel_video_player_dart(dart_sdk, packages__video_player_platform_interface__messages$46dart, packages__flutter__src__widgets__texture$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__services__system_channels$46dart, packages__flutter__src__foundation__collections$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const messages = packages__video_player_platform_interface__messages$46dart.messages;
  const texture = packages__flutter__src__widgets__texture$46dart.src__widgets__texture;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const collections = packages__flutter__src__foundation__collections$46dart.src__foundation__collections;
  var method_channel_video_player = Object.create(dart.library);
  var video_player_platform_interface = Object.create(dart.library);
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $toString = dartx.toString;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var DurationL = () => (DurationL = dart.constFn(dart.legacy(core.Duration)))();
  var VideoEventL = () => (VideoEventL = dart.constFn(dart.legacy(video_player_platform_interface.VideoEvent)))();
  var MapL = () => (MapL = dart.constFn(dart.legacy(core.Map)))();
  var ListL = () => (ListL = dart.constFn(dart.legacy(core.List)))();
  var DurationRangeL = () => (DurationRangeL = dart.constFn(dart.legacy(video_player_platform_interface.DurationRange)))();
  var dynamicToVideoEventL = () => (dynamicToVideoEventL = dart.constFn(dart.fnType(VideoEventL(), [dart.dynamic])))();
  var _LocationL = () => (_LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))();
  var NoSuchMethodErrorL = () => (NoSuchMethodErrorL = dart.constFn(dart.legacy(core.NoSuchMethodError)))();
  var VideoFormatL = () => (VideoFormatL = dart.constFn(dart.legacy(video_player_platform_interface.VideoFormat)))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var DataSourceTypeL = () => (DataSourceTypeL = dart.constFn(dart.legacy(video_player_platform_interface.DataSourceType)))();
  var VideoEventTypeL = () => (VideoEventTypeL = dart.constFn(dart.legacy(video_player_platform_interface.VideoEventType)))();
  const CT = Object.create(null);
  var L0 = "file:///D:/flutter/.pub-cache/hosted/pub.dartlang.org/video_player_platform_interface-2.2.0/lib/method_channel_video_player.dart";
  var L2 = "package:video_player_platform_interface/method_channel_video_player.dart";
  var L1 = "package:video_player_platform_interface/video_player_platform_interface.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: video_player_platform_interface.DataSourceType.prototype,
        [_name$]: "DataSourceType.asset",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: video_player_platform_interface.DataSourceType.prototype,
        [_name$]: "DataSourceType.network",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: video_player_platform_interface.DataSourceType.prototype,
        [_name$]: "DataSourceType.file",
        index: 2
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textureId",
        [_Location_column]: 20,
        [_Location_line]: 134,
        [_Location_file]: null
      });
    },
    get C4() {
      return C4 = dart.constList([C5 || CT.C5], _LocationL());
    },
    get C3() {
      return C3 = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C4 || CT.C4,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 134,
        [_Location_file]: "file:///D:/flutter/.pub-cache/hosted/pub.dartlang.org/video_player_platform_interface-2.2.0/lib/method_channel_video_player.dart"
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: video_player_platform_interface.VideoFormat.prototype,
        [_name$]: "VideoFormat.ss",
        index: 2
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: video_player_platform_interface.VideoFormat.prototype,
        [_name$]: "VideoFormat.hls",
        index: 1
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: video_player_platform_interface.VideoFormat.prototype,
        [_name$]: "VideoFormat.dash",
        index: 0
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: video_player_platform_interface.VideoFormat.prototype,
        [_name$]: "VideoFormat.other",
        index: 3
      });
    },
    get C6() {
      return C6 = dart.constMap(VideoFormatL(), StringL(), [C7 || CT.C7, "ss", C8 || CT.C8, "hls", C9 || CT.C9, "dash", C10 || CT.C10, "other"]);
    },
    get C11() {
      return C11 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2], DataSourceTypeL());
    },
    get C12() {
      return C12 = dart.constList([C9 || CT.C9, C8 || CT.C8, C7 || CT.C7, C10 || CT.C10], VideoFormatL());
    },
    get C13() {
      return C13 = dart.const({
        __proto__: video_player_platform_interface.VideoEventType.prototype,
        [_name$]: "VideoEventType.initialized",
        index: 0
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: video_player_platform_interface.VideoEventType.prototype,
        [_name$]: "VideoEventType.completed",
        index: 1
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: video_player_platform_interface.VideoEventType.prototype,
        [_name$]: "VideoEventType.bufferingUpdate",
        index: 2
      });
    },
    get C16() {
      return C16 = dart.const({
        __proto__: video_player_platform_interface.VideoEventType.prototype,
        [_name$]: "VideoEventType.bufferingStart",
        index: 3
      });
    },
    get C17() {
      return C17 = dart.const({
        __proto__: video_player_platform_interface.VideoEventType.prototype,
        [_name$]: "VideoEventType.bufferingEnd",
        index: 4
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: video_player_platform_interface.VideoEventType.prototype,
        [_name$]: "VideoEventType.unknown",
        index: 5
      });
    },
    get C19() {
      return C19 = dart.constList([C13 || CT.C13, C14 || CT.C14, C15 || CT.C15, C16 || CT.C16, C17 || CT.C17, C18 || CT.C18], VideoEventTypeL());
    }
  }, false);
  var _api = dart.privateName(method_channel_video_player, "_api");
  var _name$ = dart.privateName(video_player_platform_interface, "_name");
  var C0;
  var C1;
  var C2;
  var _eventChannelFor = dart.privateName(method_channel_video_player, "_eventChannelFor");
  var _toDurationRange = dart.privateName(method_channel_video_player, "_toDurationRange");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var C5;
  var C4;
  var C3;
  var _verifyProvidesDefaultImplementations = dart.privateName(video_player_platform_interface, "_verifyProvidesDefaultImplementations");
  video_player_platform_interface.VideoPlayerPlatform = class VideoPlayerPlatform extends core.Object {
    get isMock() {
      return false;
    }
    static get instance() {
      return video_player_platform_interface.VideoPlayerPlatform._instance;
    }
    static set instance(instance) {
      if (!dart.test(instance.isMock)) {
        try {
          instance[_verifyProvidesDefaultImplementations]();
        } catch (e) {
          let _ = dart.getThrown(e);
          if (NoSuchMethodErrorL().is(_)) {
            dart.throw(new core.AssertionError.new("Platform interfaces must not be implemented with `implements`"));
          } else
            throw e;
        }
      }
      video_player_platform_interface.VideoPlayerPlatform._instance = instance;
    }
    init() {
      dart.throw(new core.UnimplementedError.new("init() has not been implemented."));
    }
    dispose(textureId) {
      dart.throw(new core.UnimplementedError.new("dispose() has not been implemented."));
    }
    create(dataSource) {
      dart.throw(new core.UnimplementedError.new("create() has not been implemented."));
    }
    videoEventsFor(textureId) {
      dart.throw(new core.UnimplementedError.new("videoEventsFor() has not been implemented."));
    }
    setLooping(textureId, looping) {
      dart.throw(new core.UnimplementedError.new("setLooping() has not been implemented."));
    }
    play(textureId) {
      dart.throw(new core.UnimplementedError.new("play() has not been implemented."));
    }
    pause(textureId) {
      dart.throw(new core.UnimplementedError.new("pause() has not been implemented."));
    }
    setVolume(textureId, volume) {
      dart.throw(new core.UnimplementedError.new("setVolume() has not been implemented."));
    }
    seekTo(textureId, position) {
      dart.throw(new core.UnimplementedError.new("seekTo() has not been implemented."));
    }
    setPlaybackSpeed(textureId, speed) {
      dart.throw(new core.UnimplementedError.new("setPlaybackSpeed() has not been implemented."));
    }
    getPosition(textureId) {
      dart.throw(new core.UnimplementedError.new("getPosition() has not been implemented."));
    }
    buildView(textureId) {
      dart.throw(new core.UnimplementedError.new("buildView() has not been implemented."));
    }
    setMixWithOthers(mixWithOthers) {
      dart.throw(new core.UnimplementedError.new("setMixWithOthers() has not been implemented."));
    }
    [_verifyProvidesDefaultImplementations]() {
    }
  };
  (video_player_platform_interface.VideoPlayerPlatform.new = function() {
    ;
  }).prototype = video_player_platform_interface.VideoPlayerPlatform.prototype;
  dart.addTypeTests(video_player_platform_interface.VideoPlayerPlatform);
  dart.addTypeCaches(video_player_platform_interface.VideoPlayerPlatform);
  dart.setMethodSignature(video_player_platform_interface.VideoPlayerPlatform, () => ({
    __proto__: dart.getMethods(video_player_platform_interface.VideoPlayerPlatform.__proto__),
    init: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    dispose: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    create: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(video_player_platform_interface.DataSource)]),
    videoEventsFor: dart.fnType(dart.legacy(async.Stream$(dart.legacy(video_player_platform_interface.VideoEvent))), [dart.legacy(core.int)]),
    setLooping: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int), dart.legacy(core.bool)]),
    play: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    pause: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)]),
    setVolume: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int), dart.legacy(core.double)]),
    seekTo: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int), dart.legacy(core.Duration)]),
    setPlaybackSpeed: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int), dart.legacy(core.double)]),
    getPosition: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Duration))), [dart.legacy(core.int)]),
    buildView: dart.fnType(dart.legacy(framework.Widget), [dart.legacy(core.int)]),
    setMixWithOthers: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.bool)]),
    [_verifyProvidesDefaultImplementations]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(video_player_platform_interface.VideoPlayerPlatform, () => ({
    __proto__: dart.getGetters(video_player_platform_interface.VideoPlayerPlatform.__proto__),
    isMock: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(video_player_platform_interface.VideoPlayerPlatform, L1);
  dart.defineLazy(video_player_platform_interface.VideoPlayerPlatform, {
    /*video_player_platform_interface.VideoPlayerPlatform._instance*/get _instance() {
      return new method_channel_video_player.MethodChannelVideoPlayer.new();
    },
    set _instance(_) {}
  }, true);
  var C7;
  var C8;
  var C9;
  var C10;
  var C6;
  method_channel_video_player.MethodChannelVideoPlayer = class MethodChannelVideoPlayer extends video_player_platform_interface.VideoPlayerPlatform {
    init() {
      return this[_api].initialize();
    }
    dispose(textureId) {
      let t0;
      return this[_api].dispose((t0 = new messages.TextureMessage.new(), (() => {
        t0.textureId = textureId;
        return t0;
      })()));
    }
    create(dataSource) {
      return async.async(intL(), (function* create() {
        let message = new messages.CreateMessage.new();
        switch (dataSource.sourceType) {
          case C0 || CT.C0:
          {
            message.asset = dataSource.asset;
            message.packageName = dataSource.package;
            break;
          }
          case C1 || CT.C1:
          {
            message.uri = dataSource.uri;
            message.formatHint = method_channel_video_player.MethodChannelVideoPlayer._videoFormatStringMap[$_get](dataSource.formatHint);
            break;
          }
          case C2 || CT.C2:
          {
            message.uri = dataSource.uri;
            break;
          }
        }
        let response = (yield this[_api].create(message));
        return response.textureId;
      }).bind(this));
    }
    setLooping(textureId, looping) {
      let t0;
      return this[_api].setLooping((t0 = new messages.LoopingMessage.new(), (() => {
        t0.textureId = textureId;
        t0.isLooping = looping;
        return t0;
      })()));
    }
    play(textureId) {
      let t0;
      return this[_api].play((t0 = new messages.TextureMessage.new(), (() => {
        t0.textureId = textureId;
        return t0;
      })()));
    }
    pause(textureId) {
      let t0;
      return this[_api].pause((t0 = new messages.TextureMessage.new(), (() => {
        t0.textureId = textureId;
        return t0;
      })()));
    }
    setVolume(textureId, volume) {
      let t0;
      return this[_api].setVolume((t0 = new messages.VolumeMessage.new(), (() => {
        t0.textureId = textureId;
        t0.volume = volume;
        return t0;
      })()));
    }
    setPlaybackSpeed(textureId, speed) {
      let t0;
      if (!(dart.notNull(speed) > 0)) dart.assertFailed(null, L0, 76, 12, "speed > 0");
      return this[_api].setPlaybackSpeed((t0 = new messages.PlaybackSpeedMessage.new(), (() => {
        t0.textureId = textureId;
        t0.speed = speed;
        return t0;
      })()));
    }
    seekTo(textureId, position) {
      let t0;
      return this[_api].seekTo((t0 = new messages.PositionMessage.new(), (() => {
        t0.textureId = textureId;
        t0.position = position.inMilliseconds;
        return t0;
      })()));
    }
    getPosition(textureId) {
      return async.async(DurationL(), (function* getPosition() {
        let t0;
        let response = (yield this[_api].position((t0 = new messages.TextureMessage.new(), (() => {
          t0.textureId = textureId;
          return t0;
        })())));
        return new core.Duration.new({milliseconds: response.position});
      }).bind(this));
    }
    videoEventsFor(textureId) {
      return this[_eventChannelFor](textureId).receiveBroadcastStream().map(VideoEventL(), dart.fn(event => {
        let t0, t0$, t0$0, t0$1;
        let map = MapL().as(event);
        switch (map[$_get]("event")) {
          case "initialized":
          {
            return new video_player_platform_interface.VideoEvent.new({eventType: video_player_platform_interface.VideoEventType.initialized, duration: new core.Duration.new({milliseconds: core.int.as(map[$_get]("duration"))}), size: new ui.Size.new(core.double.as((t0$ = (t0 = map[$_get]("width"), t0 == null ? null : dart.dsend(t0, 'toDouble', [])), t0$ == null ? 0.0 : t0$)), core.double.as((t0$1 = (t0$0 = map[$_get]("height"), t0$0 == null ? null : dart.dsend(t0$0, 'toDouble', [])), t0$1 == null ? 0.0 : t0$1)))});
          }
          case "completed":
          {
            return new video_player_platform_interface.VideoEvent.new({eventType: video_player_platform_interface.VideoEventType.completed});
          }
          case "bufferingUpdate":
          {
            let values = ListL().as(map[$_get]("values"));
            return new video_player_platform_interface.VideoEvent.new({buffered: values[$map](DurationRangeL(), dart.bind(this, _toDurationRange))[$toList](), eventType: video_player_platform_interface.VideoEventType.bufferingUpdate});
          }
          case "bufferingStart":
          {
            return new video_player_platform_interface.VideoEvent.new({eventType: video_player_platform_interface.VideoEventType.bufferingStart});
          }
          case "bufferingEnd":
          {
            return new video_player_platform_interface.VideoEvent.new({eventType: video_player_platform_interface.VideoEventType.bufferingEnd});
          }
          default:
          {
            return new video_player_platform_interface.VideoEvent.new({eventType: video_player_platform_interface.VideoEventType.unknown});
          }
        }
      }, dynamicToVideoEventL()));
    }
    buildView(textureId) {
      return new texture.Texture.new({textureId: textureId, $creationLocationd_0dea112b090073317d4: C3 || CT.C3});
    }
    setMixWithOthers(mixWithOthers) {
      let t0;
      return this[_api].setMixWithOthers((t0 = new messages.MixWithOthersMessage.new(), (() => {
        t0.mixWithOthers = mixWithOthers;
        return t0;
      })()));
    }
    [_eventChannelFor](textureId) {
      return new platform_channel.EventChannel.new("flutter.io/videoPlayer/videoEvents" + dart.str(textureId));
    }
    [_toDurationRange](value) {
      let pair = ListL().as(value);
      return new video_player_platform_interface.DurationRange.new(new core.Duration.new({milliseconds: core.int.as(pair[$_get](0))}), new core.Duration.new({milliseconds: core.int.as(pair[$_get](1))}));
    }
  };
  (method_channel_video_player.MethodChannelVideoPlayer.new = function() {
    this[_api] = new messages.VideoPlayerApi.new();
    ;
  }).prototype = method_channel_video_player.MethodChannelVideoPlayer.prototype;
  dart.addTypeTests(method_channel_video_player.MethodChannelVideoPlayer);
  dart.addTypeCaches(method_channel_video_player.MethodChannelVideoPlayer);
  dart.setMethodSignature(method_channel_video_player.MethodChannelVideoPlayer, () => ({
    __proto__: dart.getMethods(method_channel_video_player.MethodChannelVideoPlayer.__proto__),
    [_eventChannelFor]: dart.fnType(dart.legacy(platform_channel.EventChannel), [dart.legacy(core.int)]),
    [_toDurationRange]: dart.fnType(dart.legacy(video_player_platform_interface.DurationRange), [dart.dynamic])
  }));
  dart.setLibraryUri(method_channel_video_player.MethodChannelVideoPlayer, L2);
  dart.setFieldSignature(method_channel_video_player.MethodChannelVideoPlayer, () => ({
    __proto__: dart.getFields(method_channel_video_player.MethodChannelVideoPlayer.__proto__),
    [_api]: dart.fieldType(dart.legacy(messages.VideoPlayerApi))
  }));
  dart.defineLazy(method_channel_video_player.MethodChannelVideoPlayer, {
    /*method_channel_video_player.MethodChannelVideoPlayer._videoFormatStringMap*/get _videoFormatStringMap() {
      return C6 || CT.C6;
    }
  }, true);
  var sourceType$ = dart.privateName(video_player_platform_interface, "DataSource.sourceType");
  var uri$ = dart.privateName(video_player_platform_interface, "DataSource.uri");
  var formatHint$ = dart.privateName(video_player_platform_interface, "DataSource.formatHint");
  var asset$ = dart.privateName(video_player_platform_interface, "DataSource.asset");
  var package$ = dart.privateName(video_player_platform_interface, "DataSource.package");
  video_player_platform_interface.DataSource = class DataSource extends core.Object {
    get sourceType() {
      return this[sourceType$];
    }
    set sourceType(value) {
      super.sourceType = value;
    }
    get uri() {
      return this[uri$];
    }
    set uri(value) {
      super.uri = value;
    }
    get formatHint() {
      return this[formatHint$];
    }
    set formatHint(value) {
      super.formatHint = value;
    }
    get asset() {
      return this[asset$];
    }
    set asset(value) {
      super.asset = value;
    }
    get package() {
      return this[package$];
    }
    set package(value) {
      super.package = value;
    }
  };
  (video_player_platform_interface.DataSource.new = function(opts) {
    let sourceType = opts && 'sourceType' in opts ? opts.sourceType : null;
    let uri = opts && 'uri' in opts ? opts.uri : null;
    let formatHint = opts && 'formatHint' in opts ? opts.formatHint : null;
    let asset = opts && 'asset' in opts ? opts.asset : null;
    let $package = opts && 'package' in opts ? opts.package : null;
    this[sourceType$] = sourceType;
    this[uri$] = uri;
    this[formatHint$] = formatHint;
    this[asset$] = asset;
    this[package$] = $package;
    ;
  }).prototype = video_player_platform_interface.DataSource.prototype;
  dart.addTypeTests(video_player_platform_interface.DataSource);
  dart.addTypeCaches(video_player_platform_interface.DataSource);
  dart.setLibraryUri(video_player_platform_interface.DataSource, L1);
  dart.setFieldSignature(video_player_platform_interface.DataSource, () => ({
    __proto__: dart.getFields(video_player_platform_interface.DataSource.__proto__),
    sourceType: dart.finalFieldType(dart.legacy(video_player_platform_interface.DataSourceType)),
    uri: dart.finalFieldType(dart.legacy(core.String)),
    formatHint: dart.finalFieldType(dart.legacy(video_player_platform_interface.VideoFormat)),
    asset: dart.finalFieldType(dart.legacy(core.String)),
    package: dart.finalFieldType(dart.legacy(core.String))
  }));
  var C11;
  video_player_platform_interface.DataSourceType = class DataSourceType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (video_player_platform_interface.DataSourceType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = video_player_platform_interface.DataSourceType.prototype;
  dart.addTypeTests(video_player_platform_interface.DataSourceType);
  dart.addTypeCaches(video_player_platform_interface.DataSourceType);
  dart.setMethodSignature(video_player_platform_interface.DataSourceType, () => ({
    __proto__: dart.getMethods(video_player_platform_interface.DataSourceType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(video_player_platform_interface.DataSourceType, L1);
  dart.setFieldSignature(video_player_platform_interface.DataSourceType, () => ({
    __proto__: dart.getFields(video_player_platform_interface.DataSourceType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(video_player_platform_interface.DataSourceType, ['toString']);
  video_player_platform_interface.DataSourceType.asset = C0 || CT.C0;
  video_player_platform_interface.DataSourceType.network = C1 || CT.C1;
  video_player_platform_interface.DataSourceType.file = C2 || CT.C2;
  video_player_platform_interface.DataSourceType.values = C11 || CT.C11;
  var C12;
  video_player_platform_interface.VideoFormat = class VideoFormat extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (video_player_platform_interface.VideoFormat.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = video_player_platform_interface.VideoFormat.prototype;
  dart.addTypeTests(video_player_platform_interface.VideoFormat);
  dart.addTypeCaches(video_player_platform_interface.VideoFormat);
  dart.setMethodSignature(video_player_platform_interface.VideoFormat, () => ({
    __proto__: dart.getMethods(video_player_platform_interface.VideoFormat.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(video_player_platform_interface.VideoFormat, L1);
  dart.setFieldSignature(video_player_platform_interface.VideoFormat, () => ({
    __proto__: dart.getFields(video_player_platform_interface.VideoFormat.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(video_player_platform_interface.VideoFormat, ['toString']);
  video_player_platform_interface.VideoFormat.dash = C9 || CT.C9;
  video_player_platform_interface.VideoFormat.hls = C8 || CT.C8;
  video_player_platform_interface.VideoFormat.ss = C7 || CT.C7;
  video_player_platform_interface.VideoFormat.other = C10 || CT.C10;
  video_player_platform_interface.VideoFormat.values = C12 || CT.C12;
  var eventType$ = dart.privateName(video_player_platform_interface, "VideoEvent.eventType");
  var duration$ = dart.privateName(video_player_platform_interface, "VideoEvent.duration");
  var size$ = dart.privateName(video_player_platform_interface, "VideoEvent.size");
  var buffered$ = dart.privateName(video_player_platform_interface, "VideoEvent.buffered");
  video_player_platform_interface.VideoEvent = class VideoEvent extends core.Object {
    get eventType() {
      return this[eventType$];
    }
    set eventType(value) {
      super.eventType = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get buffered() {
      return this[buffered$];
    }
    set buffered(value) {
      super.buffered = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || VideoEventL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && this.eventType == other.eventType && dart.equals(this.duration, other.duration) && dart.equals(this.size, other.size) && dart.test(collections.listEquals(DurationRangeL(), this.buffered, other.buffered));
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.eventType)) ^ dart.notNull(dart.hashCode(this.duration)) ^ dart.notNull(dart.hashCode(this.size)) ^ dart.notNull(dart.hashCode(this.buffered))) >>> 0;
    }
  };
  (video_player_platform_interface.VideoEvent.new = function(opts) {
    let eventType = opts && 'eventType' in opts ? opts.eventType : null;
    let duration = opts && 'duration' in opts ? opts.duration : null;
    let size = opts && 'size' in opts ? opts.size : null;
    let buffered = opts && 'buffered' in opts ? opts.buffered : null;
    this[eventType$] = eventType;
    this[duration$] = duration;
    this[size$] = size;
    this[buffered$] = buffered;
    ;
  }).prototype = video_player_platform_interface.VideoEvent.prototype;
  dart.addTypeTests(video_player_platform_interface.VideoEvent);
  dart.addTypeCaches(video_player_platform_interface.VideoEvent);
  dart.setMethodSignature(video_player_platform_interface.VideoEvent, () => ({
    __proto__: dart.getMethods(video_player_platform_interface.VideoEvent.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(video_player_platform_interface.VideoEvent, () => ({
    __proto__: dart.getGetters(video_player_platform_interface.VideoEvent.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(video_player_platform_interface.VideoEvent, L1);
  dart.setFieldSignature(video_player_platform_interface.VideoEvent, () => ({
    __proto__: dart.getFields(video_player_platform_interface.VideoEvent.__proto__),
    eventType: dart.finalFieldType(dart.legacy(video_player_platform_interface.VideoEventType)),
    duration: dart.finalFieldType(dart.legacy(core.Duration)),
    size: dart.finalFieldType(dart.legacy(ui.Size)),
    buffered: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(video_player_platform_interface.DurationRange))))
  }));
  dart.defineExtensionMethods(video_player_platform_interface.VideoEvent, ['_equals']);
  dart.defineExtensionAccessors(video_player_platform_interface.VideoEvent, ['hashCode']);
  var C13;
  var C14;
  var C15;
  var C16;
  var C17;
  var C18;
  var C19;
  video_player_platform_interface.VideoEventType = class VideoEventType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (video_player_platform_interface.VideoEventType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = video_player_platform_interface.VideoEventType.prototype;
  dart.addTypeTests(video_player_platform_interface.VideoEventType);
  dart.addTypeCaches(video_player_platform_interface.VideoEventType);
  dart.setMethodSignature(video_player_platform_interface.VideoEventType, () => ({
    __proto__: dart.getMethods(video_player_platform_interface.VideoEventType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(video_player_platform_interface.VideoEventType, L1);
  dart.setFieldSignature(video_player_platform_interface.VideoEventType, () => ({
    __proto__: dart.getFields(video_player_platform_interface.VideoEventType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(video_player_platform_interface.VideoEventType, ['toString']);
  video_player_platform_interface.VideoEventType.initialized = C13 || CT.C13;
  video_player_platform_interface.VideoEventType.completed = C14 || CT.C14;
  video_player_platform_interface.VideoEventType.bufferingUpdate = C15 || CT.C15;
  video_player_platform_interface.VideoEventType.bufferingStart = C16 || CT.C16;
  video_player_platform_interface.VideoEventType.bufferingEnd = C17 || CT.C17;
  video_player_platform_interface.VideoEventType.unknown = C18 || CT.C18;
  video_player_platform_interface.VideoEventType.values = C19 || CT.C19;
  var start$ = dart.privateName(video_player_platform_interface, "DurationRange.start");
  var end$ = dart.privateName(video_player_platform_interface, "DurationRange.end");
  video_player_platform_interface.DurationRange = class DurationRange extends core.Object {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    startFraction(duration) {
      return dart.notNull(this.start.inMilliseconds) / dart.notNull(duration.inMilliseconds);
    }
    endFraction(duration) {
      return dart.notNull(this.end.inMilliseconds) / dart.notNull(duration.inMilliseconds);
    }
    toString() {
      return dart.str(this.runtimeType) + "(start: " + dart.str(this.start) + ", end: " + dart.str(this.end) + ")";
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || DurationRangeL().is(other) && dart.equals(this.runtimeType, dart.runtimeType(other)) && dart.equals(this.start, other.start) && dart.equals(this.end, other.end);
    }
    get hashCode() {
      return (dart.notNull(dart.hashCode(this.start)) ^ dart.notNull(dart.hashCode(this.end))) >>> 0;
    }
  };
  (video_player_platform_interface.DurationRange.new = function(start, end) {
    this[start$] = start;
    this[end$] = end;
    ;
  }).prototype = video_player_platform_interface.DurationRange.prototype;
  dart.addTypeTests(video_player_platform_interface.DurationRange);
  dart.addTypeCaches(video_player_platform_interface.DurationRange);
  dart.setMethodSignature(video_player_platform_interface.DurationRange, () => ({
    __proto__: dart.getMethods(video_player_platform_interface.DurationRange.__proto__),
    startFraction: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Duration)]),
    endFraction: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Duration)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(video_player_platform_interface.DurationRange, () => ({
    __proto__: dart.getGetters(video_player_platform_interface.DurationRange.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(video_player_platform_interface.DurationRange, L1);
  dart.setFieldSignature(video_player_platform_interface.DurationRange, () => ({
    __proto__: dart.getFields(video_player_platform_interface.DurationRange.__proto__),
    start: dart.finalFieldType(dart.legacy(core.Duration)),
    end: dart.finalFieldType(dart.legacy(core.Duration))
  }));
  dart.defineExtensionMethods(video_player_platform_interface.DurationRange, ['toString', '_equals']);
  dart.defineExtensionAccessors(video_player_platform_interface.DurationRange, ['hashCode']);
  var mixWithOthers$ = dart.privateName(video_player_platform_interface, "VideoPlayerOptions.mixWithOthers");
  video_player_platform_interface.VideoPlayerOptions = class VideoPlayerOptions extends core.Object {
    get mixWithOthers() {
      return this[mixWithOthers$];
    }
    set mixWithOthers(value) {
      super.mixWithOthers = value;
    }
  };
  (video_player_platform_interface.VideoPlayerOptions.new = function(opts) {
    let mixWithOthers = opts && 'mixWithOthers' in opts ? opts.mixWithOthers : false;
    this[mixWithOthers$] = mixWithOthers;
    ;
  }).prototype = video_player_platform_interface.VideoPlayerOptions.prototype;
  dart.addTypeTests(video_player_platform_interface.VideoPlayerOptions);
  dart.addTypeCaches(video_player_platform_interface.VideoPlayerOptions);
  dart.setLibraryUri(video_player_platform_interface.VideoPlayerOptions, L1);
  dart.setFieldSignature(video_player_platform_interface.VideoPlayerOptions, () => ({
    __proto__: dart.getFields(video_player_platform_interface.VideoPlayerOptions.__proto__),
    mixWithOthers: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.trackLibraries("packages/video_player_platform_interface/method_channel_video_player.dart", {
    "package:video_player_platform_interface/method_channel_video_player.dart": method_channel_video_player,
    "package:video_player_platform_interface/video_player_platform_interface.dart": video_player_platform_interface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["video_player_platform_interface.dart","method_channel_video_player.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/video_player_platform_interface/method_channel_video_player.dart.lib.js"}');
  // Exports:
  return {
    method_channel_video_player: method_channel_video_player,
    video_player_platform_interface: video_player_platform_interface
  };
}));

//# sourceMappingURL=method_channel_video_player.dart.lib.js.map
