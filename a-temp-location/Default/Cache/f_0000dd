define(['dart_sdk'], (function load__packages__collection__src__empty_unmodifiable_set_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var empty_unmodifiable_set = Object.create(dart.library);
  var unmodifiable_wrappers = Object.create(dart.library);
  var wrappers = Object.create(dart.library);
  var $iterator = dartx.iterator;
  var $isEmpty = dartx.isEmpty;
  var $singleWhere = dartx.singleWhere;
  var $noSuchMethod = dartx.noSuchMethod;
  var $cast = dartx.cast;
  var $whereType = dartx.whereType;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $plus = dartx['+'];
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $asMap = dartx.asMap;
  var $clear = dartx.clear;
  var $fillRange = dartx.fillRange;
  var $getRange = dartx.getRange;
  var $indexOf = dartx.indexOf;
  var $indexWhere = dartx.indexWhere;
  var $insert = dartx.insert;
  var $insertAll = dartx.insertAll;
  var $lastIndexOf = dartx.lastIndexOf;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $length = dartx.length;
  var $remove = dartx.remove;
  var $removeAt = dartx.removeAt;
  var $removeLast = dartx.removeLast;
  var $removeRange = dartx.removeRange;
  var $removeWhere = dartx.removeWhere;
  var $replaceRange = dartx.replaceRange;
  var $retainWhere = dartx.retainWhere;
  var $reversed = dartx.reversed;
  var $setAll = dartx.setAll;
  var $setRange = dartx.setRange;
  var $shuffle = dartx.shuffle;
  var $sort = dartx.sort;
  var $sublist = dartx.sublist;
  var $any = dartx.any;
  var $contains = dartx.contains;
  var $elementAt = dartx.elementAt;
  var $every = dartx.every;
  var $expand = dartx.expand;
  var $first = dartx.first;
  var $firstWhere = dartx.firstWhere;
  var $fold = dartx.fold;
  var $followedBy = dartx.followedBy;
  var $forEach = dartx.forEach;
  var $isNotEmpty = dartx.isNotEmpty;
  var $join = dartx.join;
  var $last = dartx.last;
  var $lastWhere = dartx.lastWhere;
  var $map = dartx.map;
  var $reduce = dartx.reduce;
  var $single = dartx.single;
  var $skip = dartx.skip;
  var $skipWhile = dartx.skipWhile;
  var $take = dartx.take;
  var $takeWhile = dartx.takeWhile;
  var $toList = dartx.toList;
  var $toSet = dartx.toSet;
  var $where = dartx.where;
  var $toString = dartx.toString;
  var $putIfAbsent = dartx.putIfAbsent;
  var $addEntries = dartx.addEntries;
  var $containsKey = dartx.containsKey;
  var $containsValue = dartx.containsValue;
  var $entries = dartx.entries;
  var $keys = dartx.keys;
  var $values = dartx.values;
  var $update = dartx.update;
  var $updateAll = dartx.updateAll;
  const CT = Object.create(null);
  var L5 = "package:collection/src/unmodifiable_wrappers.dart";
  var L0 = "file:///D:/flutter/.pub-cache/hosted/pub.dartlang.org/collection-1.15.0-nullsafety.3/lib/src/empty_unmodifiable_set.dart";
  var L1 = "package:collection/src/empty_unmodifiable_set.dart";
  var L2 = "file:///D:/flutter/.pub-cache/hosted/pub.dartlang.org/collection-1.15.0-nullsafety.3/lib/src/unmodifiable_wrappers.dart";
  var L4 = "package:collection/src/wrappers.dart";
  var L3 = "file:///D:/flutter/.pub-cache/hosted/pub.dartlang.org/collection-1.15.0-nullsafety.3/lib/src/wrappers.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const(new _js_helper.PrivateSymbol.new('_base', _base));
    },
    get C1() {
      return C1 = dart.const(new _js_helper.PrivateSymbol.new('_setBase', _setBase));
    }
  }, false);
  var _base = dart.privateName(empty_unmodifiable_set, "_base");
  var C0;
  var _base$ = dart.privateName(wrappers, "_base");
  var _setBase = dart.privateName(empty_unmodifiable_set, "_setBase");
  var C1;
  var _setBase$ = dart.privateName(wrappers, "_setBase");
  const _is_EmptyUnmodifiableSet_default = Symbol('_is_EmptyUnmodifiableSet_default');
  empty_unmodifiable_set.EmptyUnmodifiableSet$ = dart.generic(E => {
    var EmptyIterableOfE = () => (EmptyIterableOfE = dart.constFn(_internal.EmptyIterable$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
    class EmptyUnmodifiableSet extends collection.IterableBase$(E) {
      static _throw(T) {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable Set"));
      }
      get iterator() {
        return new (EmptyIterableOfE()).new()[$iterator];
      }
      get length() {
        return 0;
      }
      cast(T) {
        return new (empty_unmodifiable_set.EmptyUnmodifiableSet$(T)).new();
      }
      contains(element) {
        return false;
      }
      containsAll(other) {
        if (other == null) dart.nullFailed(L0, 30, 38, "other");
        return other[$isEmpty];
      }
      followedBy(other) {
        IterableOfE().as(other);
        if (other == null) dart.nullFailed(L0, 32, 38, "other");
        return LinkedHashSetOfE().from(other);
      }
      lookup(element) {
        return null;
      }
      retype(T) {
        return new (empty_unmodifiable_set.EmptyUnmodifiableSet$(T)).new();
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(L0, 39, 34, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        return super[$singleWhere](test);
      }
      whereType(T) {
        return new (empty_unmodifiable_set.EmptyUnmodifiableSet$(T)).new();
      }
      toSet() {
        return LinkedHashSetOfE().new();
      }
      union(other) {
        SetOfE().as(other);
        if (other == null) dart.nullFailed(L0, 46, 23, "other");
        return LinkedHashSetOfE().from(other);
      }
      intersection(other) {
        if (other == null) dart.nullFailed(L0, 48, 36, "other");
        return LinkedHashSetOfE().new();
      }
      difference(other) {
        if (other == null) dart.nullFailed(L0, 50, 34, "other");
        return LinkedHashSetOfE().new();
      }
      add(value) {
        E.as(value);
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(core.bool);
      }
      addAll(elements) {
        IterableOfE().as(elements);
        if (elements == null) dart.nullFailed(L0, 55, 27, "elements");
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      clear() {
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      remove(element) {
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(core.bool);
      }
      removeAll(elements) {
        if (elements == null) dart.nullFailed(L0, 61, 36, "elements");
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(L0, 63, 37, "test");
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(L0, 65, 37, "test");
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      retainAll(elements) {
        if (elements == null) dart.nullFailed(L0, 67, 36, "elements");
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      get [_base$]() {
        return IterableOfE().as(this[$noSuchMethod](new core._Invocation.getter(C0 || CT.C0)));
      }
      get [_setBase$]() {
        return SetOfE().as(this[$noSuchMethod](new core._Invocation.getter(C1 || CT.C1)));
      }
    }
    (EmptyUnmodifiableSet.new = function() {
      EmptyUnmodifiableSet.__proto__.new.call(this);
      ;
    }).prototype = EmptyUnmodifiableSet.prototype;
    dart.addTypeTests(EmptyUnmodifiableSet);
    EmptyUnmodifiableSet.prototype[_is_EmptyUnmodifiableSet_default] = true;
    dart.addTypeCaches(EmptyUnmodifiableSet);
    EmptyUnmodifiableSet[dart.implements] = () => [unmodifiable_wrappers.UnmodifiableSetView$(E)];
    dart.setMethodSignature(EmptyUnmodifiableSet, () => ({
      __proto__: dart.getMethods(EmptyUnmodifiableSet.__proto__),
      cast: dart.gFnType(T => [empty_unmodifiable_set.EmptyUnmodifiableSet$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [empty_unmodifiable_set.EmptyUnmodifiableSet$(T), []], T => [dart.nullable(core.Object)]),
      containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [empty_unmodifiable_set.EmptyUnmodifiableSet$(T), []], T => [dart.nullable(core.Object)]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      union: dart.fnType(core.Set$(E), [dart.nullable(core.Object)]),
      intersection: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
      difference: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))])
    }));
    dart.setGetterSignature(EmptyUnmodifiableSet, () => ({
      __proto__: dart.getGetters(EmptyUnmodifiableSet.__proto__),
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E),
      [_base$]: core.Iterable$(E),
      [_setBase$]: core.Set$(E)
    }));
    dart.setLibraryUri(EmptyUnmodifiableSet, L1);
    dart.defineExtensionMethods(EmptyUnmodifiableSet, [
      'cast',
      'contains',
      'followedBy',
      'singleWhere',
      'whereType',
      'toSet'
    ]);
    dart.defineExtensionAccessors(EmptyUnmodifiableSet, ['iterator', 'length']);
    return EmptyUnmodifiableSet;
  });
  empty_unmodifiable_set.EmptyUnmodifiableSet = empty_unmodifiable_set.EmptyUnmodifiableSet$();
  dart.addTypeTests(empty_unmodifiable_set.EmptyUnmodifiableSet, _is_EmptyUnmodifiableSet_default);
  var _listBase = dart.privateName(wrappers, "_listBase");
  const _is__DelegatingIterableBase_default = Symbol('_is__DelegatingIterableBase_default');
  wrappers._DelegatingIterableBase$ = dart.generic(E => {
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    class _DelegatingIterableBase extends core.Object {
      any(test) {
        if (test == null) dart.nullFailed(L3, 20, 29, "test");
        return this[_base$][$any](test);
      }
      cast(T) {
        return this[_base$][$cast](T);
      }
      contains(element) {
        return this[_base$][$contains](element);
      }
      elementAt(index) {
        if (index == null) dart.nullFailed(L3, 29, 19, "index");
        return this[_base$][$elementAt](index);
      }
      every(test) {
        if (test == null) dart.nullFailed(L3, 32, 31, "test");
        return this[_base$][$every](test);
      }
      expand(T, f) {
        if (f == null) dart.nullFailed(L3, 35, 49, "f");
        return this[_base$][$expand](T, f);
      }
      get first() {
        return this[_base$][$first];
      }
      firstWhere(test, opts) {
        if (test == null) dart.nullFailed(L3, 41, 33, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        return this[_base$][$firstWhere](test, {orElse: orElse});
      }
      fold(T, initialValue, combine) {
        if (combine == null) dart.nullFailed(L3, 45, 68, "combine");
        return this[_base$][$fold](T, initialValue, combine);
      }
      followedBy(other) {
        IterableOfE().as(other);
        if (other == null) dart.nullFailed(L3, 49, 38, "other");
        return this[_base$][$followedBy](other);
      }
      forEach(f) {
        if (f == null) dart.nullFailed(L3, 52, 33, "f");
        return this[_base$][$forEach](f);
      }
      get isEmpty() {
        return this[_base$][$isEmpty];
      }
      get isNotEmpty() {
        return this[_base$][$isNotEmpty];
      }
      get iterator() {
        return this[_base$][$iterator];
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
      join(separator = "") {
        if (separator == null) dart.nullFailed(L3, 64, 23, "separator");
        return this[_base$][$join](separator);
      }
      get last() {
        return this[_base$][$last];
      }
      lastWhere(test, opts) {
        if (test == null) dart.nullFailed(L3, 70, 32, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        return this[_base$][$lastWhere](test, {orElse: orElse});
      }
      get length() {
        return this[_base$][$length];
      }
      map(T, f) {
        if (f == null) dart.nullFailed(L3, 77, 36, "f");
        return this[_base$][$map](T, f);
      }
      reduce(combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(L3, 80, 43, "combine");
        return this[_base$][$reduce](combine);
      }
      retype(T) {
        return this.cast(T);
      }
      get single() {
        return this[_base$][$single];
      }
      singleWhere(test, opts) {
        if (test == null) dart.nullFailed(L3, 89, 34, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        return this[_base$][$singleWhere](test, {orElse: orElse});
      }
      skip(n) {
        if (n == null) dart.nullFailed(L3, 94, 24, "n");
        return this[_base$][$skip](n);
      }
      skipWhile(test) {
        if (test == null) dart.nullFailed(L3, 97, 42, "test");
        return this[_base$][$skipWhile](test);
      }
      take(n) {
        if (n == null) dart.nullFailed(L3, 100, 24, "n");
        return this[_base$][$take](n);
      }
      takeWhile(test) {
        if (test == null) dart.nullFailed(L3, 103, 42, "test");
        return this[_base$][$takeWhile](test);
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        if (growable == null) dart.nullFailed(L3, 106, 24, "growable");
        return this[_base$][$toList]({growable: growable});
      }
      toSet() {
        return this[_base$][$toSet]();
      }
      where(test) {
        if (test == null) dart.nullFailed(L3, 112, 38, "test");
        return this[_base$][$where](test);
      }
      whereType(T) {
        return this[_base$][$whereType](T);
      }
      toString() {
        return dart.toString(this[_base$]);
      }
    }
    (_DelegatingIterableBase.new = function() {
      ;
    }).prototype = _DelegatingIterableBase.prototype;
    _DelegatingIterableBase.prototype[dart.isIterable] = true;
    dart.addTypeTests(_DelegatingIterableBase);
    _DelegatingIterableBase.prototype[_is__DelegatingIterableBase_default] = true;
    dart.addTypeCaches(_DelegatingIterableBase);
    _DelegatingIterableBase[dart.implements] = () => [core.Iterable$(E)];
    dart.setMethodSignature(_DelegatingIterableBase, () => ({
      __proto__: dart.getMethods(_DelegatingIterableBase.__proto__),
      any: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$any]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      cast: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      contains: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$contains]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      elementAt: dart.fnType(E, [core.int]),
      [$elementAt]: dart.fnType(E, [core.int]),
      every: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      [$every]: dart.fnType(core.bool, [dart.fnType(core.bool, [E])]),
      expand: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      [$expand]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(core.Iterable$(T), [E])]], T => [dart.nullable(core.Object)]),
      firstWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$firstWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      fold: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      [$fold]: dart.gFnType(T => [T, [T, dart.fnType(T, [T, E])]], T => [dart.nullable(core.Object)]),
      followedBy: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      [$followedBy]: dart.fnType(core.Iterable$(E), [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [E])]),
      join: dart.fnType(core.String, [], [core.String]),
      [$join]: dart.fnType(core.String, [], [core.String]),
      lastWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$lastWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      map: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      [$map]: dart.gFnType(T => [core.Iterable$(T), [dart.fnType(T, [E])]], T => [dart.nullable(core.Object)]),
      reduce: dart.fnType(E, [dart.nullable(core.Object)]),
      [$reduce]: dart.fnType(E, [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      singleWhere: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      [$singleWhere]: dart.fnType(E, [dart.fnType(core.bool, [E])], {orElse: dart.nullable(core.Object)}, {}),
      skip: dart.fnType(core.Iterable$(E), [core.int]),
      [$skip]: dart.fnType(core.Iterable$(E), [core.int]),
      skipWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$skipWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      take: dart.fnType(core.Iterable$(E), [core.int]),
      [$take]: dart.fnType(core.Iterable$(E), [core.int]),
      takeWhile: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$takeWhile]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      toList: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      [$toList]: dart.fnType(core.List$(E), [], {growable: core.bool}, {}),
      toSet: dart.fnType(core.Set$(E), []),
      [$toSet]: dart.fnType(core.Set$(E), []),
      where: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      [$where]: dart.fnType(core.Iterable$(E), [dart.fnType(core.bool, [E])]),
      whereType: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)]),
      [$whereType]: dart.gFnType(T => [core.Iterable$(T), []], T => [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(_DelegatingIterableBase, () => ({
      __proto__: dart.getGetters(_DelegatingIterableBase.__proto__),
      first: E,
      [$first]: E,
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      iterator: core.Iterator$(E),
      [$iterator]: core.Iterator$(E),
      last: E,
      [$last]: E,
      length: core.int,
      [$length]: core.int,
      single: E,
      [$single]: E
    }));
    dart.setLibraryUri(_DelegatingIterableBase, L4);
    dart.defineExtensionMethods(_DelegatingIterableBase, [
      'any',
      'cast',
      'contains',
      'elementAt',
      'every',
      'expand',
      'firstWhere',
      'fold',
      'followedBy',
      'forEach',
      'join',
      'lastWhere',
      'map',
      'reduce',
      'singleWhere',
      'skip',
      'skipWhile',
      'take',
      'takeWhile',
      'toList',
      'toSet',
      'where',
      'whereType',
      'toString'
    ]);
    dart.defineExtensionAccessors(_DelegatingIterableBase, [
      'first',
      'isEmpty',
      'isNotEmpty',
      'iterator',
      'last',
      'length',
      'single'
    ]);
    return _DelegatingIterableBase;
  });
  wrappers._DelegatingIterableBase = wrappers._DelegatingIterableBase$();
  dart.addTypeTests(wrappers._DelegatingIterableBase, _is__DelegatingIterableBase_default);
  const _is_DelegatingIterable_default = Symbol('_is_DelegatingIterable_default');
  var _base$0 = dart.privateName(wrappers, "DelegatingIterable._base");
  wrappers.DelegatingIterable$ = dart.generic(E => {
    class DelegatingIterable extends wrappers._DelegatingIterableBase$(E) {
      get [_base$]() {
        return this[_base$0];
      }
      set [_base$](value) {
        super[_base$] = value;
      }
      static typed(E, base) {
        if (base == null) dart.nullFailed(L3, 143, 40, "base");
        return base[$cast](E);
      }
    }
    (DelegatingIterable.new = function(base) {
      if (base == null) dart.nullFailed(L3, 131, 40, "base");
      this[_base$0] = base;
      DelegatingIterable.__proto__.new.call(this);
      ;
    }).prototype = DelegatingIterable.prototype;
    dart.addTypeTests(DelegatingIterable);
    DelegatingIterable.prototype[_is_DelegatingIterable_default] = true;
    dart.addTypeCaches(DelegatingIterable);
    dart.setLibraryUri(DelegatingIterable, L4);
    dart.setFieldSignature(DelegatingIterable, () => ({
      __proto__: dart.getFields(DelegatingIterable.__proto__),
      [_base$]: dart.finalFieldType(core.Iterable$(E))
    }));
    return DelegatingIterable;
  });
  wrappers.DelegatingIterable = wrappers.DelegatingIterable$();
  dart.addTypeTests(wrappers.DelegatingIterable, _is_DelegatingIterable_default);
  const _is_DelegatingList_default = Symbol('_is_DelegatingList_default');
  wrappers.DelegatingList$ = dart.generic(E => {
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    class DelegatingList extends wrappers.DelegatingIterable$(E) {
      static typed(E, base) {
        if (base == null) dart.nullFailed(L3, 166, 32, "base");
        return base[$cast](E);
      }
      get [_listBase]() {
        return ListOfE().as(this[_base$]);
      }
      _get(index) {
        if (index == null) dart.nullFailed(L3, 171, 21, "index");
        return this[_listBase][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        if (index == null) dart.nullFailed(L3, 174, 25, "index");
        E.as(value);
        this[_listBase][$_set](index, value);
        return value$;
      }
      ['+'](other) {
        ListOfE().as(other);
        if (other == null) dart.nullFailed(L3, 179, 30, "other");
        return this[_listBase][$plus](other);
      }
      add(value) {
        E.as(value);
        this[_listBase][$add](value);
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L3, 187, 27, "iterable");
        this[_listBase][$addAll](iterable);
      }
      asMap() {
        return this[_listBase][$asMap]();
      }
      cast(T) {
        return this[_listBase][$cast](T);
      }
      clear() {
        this[_listBase][$clear]();
      }
      fillRange(start, end, fillValue = null) {
        if (start == null) dart.nullFailed(L3, 203, 22, "start");
        if (end == null) dart.nullFailed(L3, 203, 33, "end");
        EN().as(fillValue);
        this[_listBase][$fillRange](start, end, fillValue);
      }
      set first(value) {
        E.as(value);
        if (dart.test(this.isEmpty)) dart.throw(new core.IndexError.new(0, this));
        this._set(0, value);
      }
      get first() {
        return super.first;
      }
      getRange(start, end) {
        if (start == null) dart.nullFailed(L3, 214, 28, "start");
        if (end == null) dart.nullFailed(L3, 214, 39, "end");
        return this[_listBase][$getRange](start, end);
      }
      indexOf(element, start = 0) {
        E.as(element);
        if (start == null) dart.nullFailed(L3, 217, 31, "start");
        return this[_listBase][$indexOf](element, start);
      }
      indexWhere(test, start = 0) {
        if (test == null) dart.nullFailed(L3, 220, 35, "test");
        if (start == null) dart.nullFailed(L3, 220, 46, "start");
        return this[_listBase][$indexWhere](test, start);
      }
      insert(index, element) {
        if (index == null) dart.nullFailed(L3, 224, 19, "index");
        E.as(element);
        this[_listBase][$insert](index, element);
      }
      insertAll(index, iterable) {
        if (index == null) dart.nullFailed(L3, 229, 22, "index");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L3, 229, 41, "iterable");
        this[_listBase][$insertAll](index, iterable);
      }
      set last(value) {
        E.as(value);
        if (dart.test(this.isEmpty)) dart.throw(new core.IndexError.new(0, this));
        this._set(dart.notNull(this.length) - 1, value);
      }
      get last() {
        return super.last;
      }
      lastIndexOf(element, start = null) {
        E.as(element);
        return this[_listBase][$lastIndexOf](element, start);
      }
      lastIndexWhere(test, start = null) {
        if (test == null) dart.nullFailed(L3, 244, 39, "test");
        return this[_listBase][$lastIndexWhere](test, start);
      }
      set length(newLength) {
        if (newLength == null) dart.nullFailed(L3, 248, 18, "newLength");
        this[_listBase][$length] = newLength;
      }
      get length() {
        return super.length;
      }
      remove(value) {
        return this[_listBase][$remove](value);
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(L3, 256, 18, "index");
        return this[_listBase][$removeAt](index);
      }
      removeLast() {
        return this[_listBase][$removeLast]();
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(L3, 262, 24, "start");
        if (end == null) dart.nullFailed(L3, 262, 35, "end");
        this[_listBase][$removeRange](start, end);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(L3, 267, 37, "test");
        this[_listBase][$removeWhere](test);
      }
      replaceRange(start, end, iterable) {
        if (start == null) dart.nullFailed(L3, 272, 25, "start");
        if (end == null) dart.nullFailed(L3, 272, 36, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L3, 272, 53, "iterable");
        this[_listBase][$replaceRange](start, end, iterable);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(L3, 277, 37, "test");
        this[_listBase][$retainWhere](test);
      }
      retype(T) {
        return this.cast(T);
      }
      get reversed() {
        return this[_listBase][$reversed];
      }
      setAll(index, iterable) {
        if (index == null) dart.nullFailed(L3, 289, 19, "index");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L3, 289, 38, "iterable");
        this[_listBase][$setAll](index, iterable);
      }
      setRange(start, end, iterable, skipCount = 0) {
        if (start == null) dart.nullFailed(L3, 294, 21, "start");
        if (end == null) dart.nullFailed(L3, 294, 32, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L3, 294, 49, "iterable");
        if (skipCount == null) dart.nullFailed(L3, 294, 64, "skipCount");
        this[_listBase][$setRange](start, end, iterable, skipCount);
      }
      shuffle(random = null) {
        this[_listBase][$shuffle](random);
      }
      sort(compare = null) {
        this[_listBase][$sort](compare);
      }
      sublist(start, end = null) {
        if (start == null) dart.nullFailed(L3, 309, 23, "start");
        return this[_listBase][$sublist](start, end);
      }
    }
    (DelegatingList.new = function(base) {
      if (base == null) dart.nullFailed(L3, 152, 32, "base");
      DelegatingList.__proto__.new.call(this, base);
      ;
    }).prototype = DelegatingList.prototype;
    DelegatingList.prototype[dart.isList] = true;
    dart.addTypeTests(DelegatingList);
    DelegatingList.prototype[_is_DelegatingList_default] = true;
    dart.addTypeCaches(DelegatingList);
    DelegatingList[dart.implements] = () => [core.List$(E)];
    dart.setMethodSignature(DelegatingList, () => ({
      __proto__: dart.getMethods(DelegatingList.__proto__),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      '+': dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      [$plus]: dart.fnType(core.List$(E), [dart.nullable(core.Object)]),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      asMap: dart.fnType(core.Map$(core.int, E), []),
      [$asMap]: dart.fnType(core.Map$(core.int, E), []),
      cast: dart.gFnType(T => [core.List$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [core.List$(T), []], T => [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      fillRange: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
      [$fillRange]: dart.fnType(dart.void, [core.int, core.int], [dart.nullable(core.Object)]),
      getRange: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      [$getRange]: dart.fnType(core.Iterable$(E), [core.int, core.int]),
      indexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      [$indexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [core.int]),
      indexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      [$indexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [core.int]),
      insert: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      lastIndexOf: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      [$lastIndexOf]: dart.fnType(core.int, [dart.nullable(core.Object)], [dart.nullable(core.int)]),
      lastIndexWhere: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
      [$lastIndexWhere]: dart.fnType(core.int, [dart.fnType(core.bool, [E])], [dart.nullable(core.int)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeAt: dart.fnType(E, [core.int]),
      [$removeAt]: dart.fnType(E, [core.int]),
      removeLast: dart.fnType(E, []),
      [$removeLast]: dart.fnType(E, []),
      removeRange: dart.fnType(dart.void, [core.int, core.int]),
      [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      replaceRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retype: dart.gFnType(T => [core.List$(T), []], T => [dart.nullable(core.Object)]),
      setAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$setAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      setRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
      [$setRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)], [core.int]),
      shuffle: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
      [$shuffle]: dart.fnType(dart.void, [], [dart.nullable(math.Random)]),
      sort: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
      [$sort]: dart.fnType(dart.void, [], [dart.nullable(dart.fnType(core.int, [E, E]))]),
      sublist: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)]),
      [$sublist]: dart.fnType(core.List$(E), [core.int], [dart.nullable(core.int)])
    }));
    dart.setGetterSignature(DelegatingList, () => ({
      __proto__: dart.getGetters(DelegatingList.__proto__),
      [_listBase]: core.List$(E),
      reversed: core.Iterable$(E),
      [$reversed]: core.Iterable$(E)
    }));
    dart.setSetterSignature(DelegatingList, () => ({
      __proto__: dart.getSetters(DelegatingList.__proto__),
      first: dart.nullable(core.Object),
      [$first]: dart.nullable(core.Object),
      last: dart.nullable(core.Object),
      [$last]: dart.nullable(core.Object),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(DelegatingList, L4);
    dart.defineExtensionMethods(DelegatingList, [
      '_get',
      '_set',
      '+',
      'add',
      'addAll',
      'asMap',
      'cast',
      'clear',
      'fillRange',
      'getRange',
      'indexOf',
      'indexWhere',
      'insert',
      'insertAll',
      'lastIndexOf',
      'lastIndexWhere',
      'remove',
      'removeAt',
      'removeLast',
      'removeRange',
      'removeWhere',
      'replaceRange',
      'retainWhere',
      'setAll',
      'setRange',
      'shuffle',
      'sort',
      'sublist'
    ]);
    dart.defineExtensionAccessors(DelegatingList, ['first', 'last', 'length', 'reversed']);
    return DelegatingList;
  });
  wrappers.DelegatingList = wrappers.DelegatingList$();
  dart.addTypeTests(wrappers.DelegatingList, _is_DelegatingList_default);
  const _is_NonGrowableListMixin_default = Symbol('_is_NonGrowableListMixin_default');
  unmodifiable_wrappers.NonGrowableListMixin$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class NonGrowableListMixin extends core.Object {
      static _throw(T) {
        dart.throw(new core.UnsupportedError.new("Cannot change the length of a fixed-length list"));
      }
      set length(newLength) {
        if (newLength == null) dart.nullFailed(L2, 36, 18, "newLength");
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      add(value) {
        E.as(value);
        return unmodifiable_wrappers.NonGrowableListMixin._throw(core.bool);
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L2, 46, 27, "iterable");
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      insert(index, element) {
        if (index == null) dart.nullFailed(L2, 51, 19, "index");
        E.as(element);
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      insertAll(index, iterable) {
        if (index == null) dart.nullFailed(L2, 56, 22, "index");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L2, 56, 41, "iterable");
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      remove(value) {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(core.bool);
      }
      removeAt(index) {
        if (index == null) dart.nullFailed(L2, 66, 18, "index");
        return unmodifiable_wrappers.NonGrowableListMixin._throw(E);
      }
      removeLast() {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(E);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(L2, 76, 37, "test");
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(L2, 81, 37, "test");
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      removeRange(start, end) {
        if (start == null) dart.nullFailed(L2, 86, 24, "start");
        if (end == null) dart.nullFailed(L2, 86, 35, "end");
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      replaceRange(start, end, iterable) {
        if (start == null) dart.nullFailed(L2, 91, 25, "start");
        if (end == null) dart.nullFailed(L2, 91, 36, "end");
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L2, 91, 53, "iterable");
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      clear() {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (NonGrowableListMixin.new = function() {
      ;
    }).prototype = NonGrowableListMixin.prototype;
    NonGrowableListMixin.prototype[dart.isList] = true;
    dart.addTypeTests(NonGrowableListMixin);
    NonGrowableListMixin.prototype[_is_NonGrowableListMixin_default] = true;
    dart.addTypeCaches(NonGrowableListMixin);
    NonGrowableListMixin[dart.implements] = () => [core.List$(E)];
    dart.setMethodSignature(NonGrowableListMixin, () => ({
      __proto__: dart.getMethods(NonGrowableListMixin.__proto__),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$add]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      insert: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insert]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      insertAll: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeAt: dart.fnType(E, [core.int]),
      [$removeAt]: dart.fnType(E, [core.int]),
      removeLast: dart.fnType(E, []),
      [$removeLast]: dart.fnType(E, []),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      [$retainWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      removeRange: dart.fnType(dart.void, [core.int, core.int]),
      [$removeRange]: dart.fnType(dart.void, [core.int, core.int]),
      replaceRange: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [core.int, core.int, dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, [])
    }));
    dart.setSetterSignature(NonGrowableListMixin, () => ({
      __proto__: dart.getSetters(NonGrowableListMixin.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(NonGrowableListMixin, L5);
    dart.defineExtensionMethods(NonGrowableListMixin, [
      'add',
      'addAll',
      'insert',
      'insertAll',
      'remove',
      'removeAt',
      'removeLast',
      'removeWhere',
      'retainWhere',
      'removeRange',
      'replaceRange',
      'clear'
    ]);
    dart.defineExtensionAccessors(NonGrowableListMixin, ['length']);
    return NonGrowableListMixin;
  });
  unmodifiable_wrappers.NonGrowableListMixin = unmodifiable_wrappers.NonGrowableListMixin$();
  dart.addTypeTests(unmodifiable_wrappers.NonGrowableListMixin, _is_NonGrowableListMixin_default);
  const _is_NonGrowableListView_default = Symbol('_is_NonGrowableListView_default');
  unmodifiable_wrappers.NonGrowableListView$ = dart.generic(E => {
    const DelegatingList_NonGrowableListMixin$36 = class DelegatingList_NonGrowableListMixin extends wrappers.DelegatingList$(E) {};
    (DelegatingList_NonGrowableListMixin$36.new = function(base) {
      DelegatingList_NonGrowableListMixin$36.__proto__.new.call(this, base);
    }).prototype = DelegatingList_NonGrowableListMixin$36.prototype;
    dart.applyMixin(DelegatingList_NonGrowableListMixin$36, unmodifiable_wrappers.NonGrowableListMixin$(E));
    class NonGrowableListView extends DelegatingList_NonGrowableListMixin$36 {}
    (NonGrowableListView.new = function(listBase) {
      if (listBase == null) dart.nullFailed(L2, 23, 31, "listBase");
      NonGrowableListView.__proto__.new.call(this, listBase);
      ;
    }).prototype = NonGrowableListView.prototype;
    dart.addTypeTests(NonGrowableListView);
    NonGrowableListView.prototype[_is_NonGrowableListView_default] = true;
    dart.addTypeCaches(NonGrowableListView);
    dart.setLibraryUri(NonGrowableListView, L5);
    return NonGrowableListView;
  });
  unmodifiable_wrappers.NonGrowableListView = unmodifiable_wrappers.NonGrowableListView$();
  dart.addTypeTests(unmodifiable_wrappers.NonGrowableListView, _is_NonGrowableListView_default);
  const _is_DelegatingSet_default = Symbol('_is_DelegatingSet_default');
  wrappers.DelegatingSet$ = dart.generic(E => {
    var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var DelegatingSetOfE = () => (DelegatingSetOfE = dart.constFn(wrappers.DelegatingSet$(E)))();
    class DelegatingSet extends wrappers.DelegatingIterable$(E) {
      static typed(E, base) {
        if (base == null) dart.nullFailed(L3, 331, 30, "base");
        return base.cast(E);
      }
      get [_setBase$]() {
        return SetOfE().as(this[_base$]);
      }
      add(value) {
        E.as(value);
        return this[_setBase$].add(value);
      }
      addAll(elements) {
        IterableOfE().as(elements);
        if (elements == null) dart.nullFailed(L3, 339, 27, "elements");
        this[_setBase$].addAll(elements);
      }
      cast(T) {
        return this[_setBase$].cast(T);
      }
      clear() {
        this[_setBase$].clear();
      }
      containsAll(other) {
        if (other == null) dart.nullFailed(L3, 352, 38, "other");
        return this[_setBase$].containsAll(other);
      }
      difference(other) {
        if (other == null) dart.nullFailed(L3, 355, 34, "other");
        return this[_setBase$].difference(other);
      }
      intersection(other) {
        if (other == null) dart.nullFailed(L3, 358, 36, "other");
        return this[_setBase$].intersection(other);
      }
      lookup(element) {
        return this[_setBase$].lookup(element);
      }
      remove(value) {
        return this[_setBase$].remove(value);
      }
      removeAll(elements) {
        if (elements == null) dart.nullFailed(L3, 367, 36, "elements");
        this[_setBase$].removeAll(elements);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(L3, 372, 37, "test");
        this[_setBase$].removeWhere(test);
      }
      retainAll(elements) {
        if (elements == null) dart.nullFailed(L3, 377, 36, "elements");
        this[_setBase$].retainAll(elements);
      }
      retype(T) {
        return this.cast(T);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(L3, 386, 37, "test");
        this[_setBase$].retainWhere(test);
      }
      union(other) {
        SetOfE().as(other);
        if (other == null) dart.nullFailed(L3, 391, 23, "other");
        return this[_setBase$].union(other);
      }
      toSet() {
        return new (DelegatingSetOfE()).new(this[_setBase$].toSet());
      }
    }
    (DelegatingSet.new = function(base) {
      if (base == null) dart.nullFailed(L3, 317, 30, "base");
      DelegatingSet.__proto__.new.call(this, base);
      ;
    }).prototype = DelegatingSet.prototype;
    dart.addTypeTests(DelegatingSet);
    DelegatingSet.prototype[_is_DelegatingSet_default] = true;
    dart.addTypeCaches(DelegatingSet);
    DelegatingSet[dart.implements] = () => [core.Set$(E)];
    dart.setMethodSignature(DelegatingSet, () => ({
      __proto__: dart.getMethods(DelegatingSet.__proto__),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      cast: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
      difference: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
      intersection: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
      lookup: dart.fnType(dart.nullable(E), [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      retype: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      union: dart.fnType(core.Set$(E), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(DelegatingSet, () => ({
      __proto__: dart.getGetters(DelegatingSet.__proto__),
      [_setBase$]: core.Set$(E)
    }));
    dart.setLibraryUri(DelegatingSet, L4);
    dart.defineExtensionMethods(DelegatingSet, ['cast', 'toSet']);
    return DelegatingSet;
  });
  wrappers.DelegatingSet = wrappers.DelegatingSet$();
  dart.addTypeTests(wrappers.DelegatingSet, _is_DelegatingSet_default);
  const _is_UnmodifiableSetMixin_default = Symbol('_is_UnmodifiableSetMixin_default');
  unmodifiable_wrappers.UnmodifiableSetMixin$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class UnmodifiableSetMixin extends core.Object {
      static _throw(T) {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable Set"));
      }
      add(value) {
        E.as(value);
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(core.bool);
      }
      addAll(elements) {
        IterableOfE().as(elements);
        if (elements == null) dart.nullFailed(L2, 132, 27, "elements");
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      remove(value) {
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(core.bool);
      }
      removeAll(elements) {
        if (elements == null) dart.nullFailed(L2, 142, 27, "elements");
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      retainAll(elements) {
        if (elements == null) dart.nullFailed(L2, 147, 27, "elements");
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(L2, 152, 37, "test");
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(L2, 157, 37, "test");
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      clear() {
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (UnmodifiableSetMixin.new = function() {
      ;
    }).prototype = UnmodifiableSetMixin.prototype;
    dart.addTypeTests(UnmodifiableSetMixin);
    UnmodifiableSetMixin.prototype[_is_UnmodifiableSetMixin_default] = true;
    dart.addTypeCaches(UnmodifiableSetMixin);
    UnmodifiableSetMixin[dart.implements] = () => [core.Set$(E)];
    dart.setMethodSignature(UnmodifiableSetMixin, () => ({
      __proto__: dart.getMethods(UnmodifiableSetMixin.__proto__),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeAll: dart.fnType(dart.void, [core.Iterable]),
      retainAll: dart.fnType(dart.void, [core.Iterable]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(UnmodifiableSetMixin, L5);
    return UnmodifiableSetMixin;
  });
  unmodifiable_wrappers.UnmodifiableSetMixin = unmodifiable_wrappers.UnmodifiableSetMixin$();
  dart.addTypeTests(unmodifiable_wrappers.UnmodifiableSetMixin, _is_UnmodifiableSetMixin_default);
  const _is_UnmodifiableSetView_default = Symbol('_is_UnmodifiableSetView_default');
  unmodifiable_wrappers.UnmodifiableSetView$ = dart.generic(E => {
    const DelegatingSet_UnmodifiableSetMixin$36 = class DelegatingSet_UnmodifiableSetMixin extends wrappers.DelegatingSet$(E) {};
    (DelegatingSet_UnmodifiableSetMixin$36.new = function(base) {
      DelegatingSet_UnmodifiableSetMixin$36.__proto__.new.call(this, base);
    }).prototype = DelegatingSet_UnmodifiableSetMixin$36.prototype;
    dart.applyMixin(DelegatingSet_UnmodifiableSetMixin$36, unmodifiable_wrappers.UnmodifiableSetMixin$(E));
    class UnmodifiableSetView extends DelegatingSet_UnmodifiableSetMixin$36 {}
    (UnmodifiableSetView.new = function(setBase) {
      if (setBase == null) dart.nullFailed(L2, 108, 30, "setBase");
      UnmodifiableSetView.__proto__.new.call(this, setBase);
      ;
    }).prototype = UnmodifiableSetView.prototype;
    dart.addTypeTests(UnmodifiableSetView);
    UnmodifiableSetView.prototype[_is_UnmodifiableSetView_default] = true;
    dart.addTypeCaches(UnmodifiableSetView);
    dart.setLibraryUri(UnmodifiableSetView, L5);
    return UnmodifiableSetView;
  });
  unmodifiable_wrappers.UnmodifiableSetView = unmodifiable_wrappers.UnmodifiableSetView$();
  dart.addTypeTests(unmodifiable_wrappers.UnmodifiableSetView, _is_UnmodifiableSetView_default);
  const _is_UnmodifiableMapMixin_default = Symbol('_is_UnmodifiableMapMixin_default');
  unmodifiable_wrappers.UnmodifiableMapMixin$ = dart.generic((K, V) => {
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    class UnmodifiableMapMixin extends core.Object {
      static _throw(T) {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable Map"));
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
        return value$;
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(L2, 180, 37, "ifAbsent");
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(V);
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(L2, 185, 25, "other");
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
      }
      remove(key) {
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(V);
      }
      clear() {
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
      }
      set first(_) {
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
      }
      set last(_) {
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
      }
    }
    (UnmodifiableMapMixin.new = function() {
      ;
    }).prototype = UnmodifiableMapMixin.prototype;
    UnmodifiableMapMixin.prototype[dart.isMap] = true;
    dart.addTypeTests(UnmodifiableMapMixin);
    UnmodifiableMapMixin.prototype[_is_UnmodifiableMapMixin_default] = true;
    dart.addTypeCaches(UnmodifiableMapMixin);
    UnmodifiableMapMixin[dart.implements] = () => [core.Map$(K, V)];
    dart.setMethodSignature(UnmodifiableMapMixin, () => ({
      __proto__: dart.getMethods(UnmodifiableMapMixin.__proto__),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(V, [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(V, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, [])
    }));
    dart.setSetterSignature(UnmodifiableMapMixin, () => ({
      __proto__: dart.getSetters(UnmodifiableMapMixin.__proto__),
      first: dart.dynamic,
      last: dart.dynamic
    }));
    dart.setLibraryUri(UnmodifiableMapMixin, L5);
    dart.defineExtensionMethods(UnmodifiableMapMixin, [
      '_set',
      'putIfAbsent',
      'addAll',
      'remove',
      'clear'
    ]);
    return UnmodifiableMapMixin;
  });
  unmodifiable_wrappers.UnmodifiableMapMixin = unmodifiable_wrappers.UnmodifiableMapMixin$();
  dart.addTypeTests(unmodifiable_wrappers.UnmodifiableMapMixin, _is_UnmodifiableMapMixin_default);
  var _baseQueue = dart.privateName(wrappers, "_baseQueue");
  const _is_DelegatingQueue_default = Symbol('_is_DelegatingQueue_default');
  wrappers.DelegatingQueue$ = dart.generic(E => {
    var QueueOfE = () => (QueueOfE = dart.constFn(collection.Queue$(E)))();
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    class DelegatingQueue extends wrappers.DelegatingIterable$(E) {
      static typed(E, base) {
        if (base == null) dart.nullFailed(L3, 417, 34, "base");
        return base.cast(E);
      }
      get [_baseQueue]() {
        return QueueOfE().as(this[_base$]);
      }
      add(value) {
        E.as(value);
        this[_baseQueue].add(value);
      }
      addAll(iterable) {
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(L3, 427, 27, "iterable");
        this[_baseQueue].addAll(iterable);
      }
      addFirst(value) {
        E.as(value);
        this[_baseQueue].addFirst(value);
      }
      addLast(value) {
        E.as(value);
        this[_baseQueue].addLast(value);
      }
      cast(T) {
        return this[_baseQueue].cast(T);
      }
      clear() {
        this[_baseQueue].clear();
      }
      remove(object) {
        return this[_baseQueue].remove(object);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(L3, 453, 37, "test");
        this[_baseQueue].removeWhere(test);
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(L3, 458, 37, "test");
        this[_baseQueue].retainWhere(test);
      }
      retype(T) {
        return this.cast(T);
      }
      removeFirst() {
        return this[_baseQueue].removeFirst();
      }
      removeLast() {
        return this[_baseQueue].removeLast();
      }
    }
    (DelegatingQueue.new = function(queue) {
      if (queue == null) dart.nullFailed(L3, 403, 34, "queue");
      DelegatingQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = DelegatingQueue.prototype;
    dart.addTypeTests(DelegatingQueue);
    DelegatingQueue.prototype[_is_DelegatingQueue_default] = true;
    dart.addTypeCaches(DelegatingQueue);
    DelegatingQueue[dart.implements] = () => [collection.Queue$(E)];
    dart.setMethodSignature(DelegatingQueue, () => ({
      __proto__: dart.getMethods(DelegatingQueue.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      cast: dart.gFnType(T => [collection.Queue$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [collection.Queue$(T), []], T => [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [E])]),
      retype: dart.gFnType(T => [collection.Queue$(T), []], T => [dart.nullable(core.Object)]),
      removeFirst: dart.fnType(E, []),
      removeLast: dart.fnType(E, [])
    }));
    dart.setGetterSignature(DelegatingQueue, () => ({
      __proto__: dart.getGetters(DelegatingQueue.__proto__),
      [_baseQueue]: collection.Queue$(E)
    }));
    dart.setLibraryUri(DelegatingQueue, L4);
    dart.defineExtensionMethods(DelegatingQueue, ['cast']);
    return DelegatingQueue;
  });
  wrappers.DelegatingQueue = wrappers.DelegatingQueue$();
  dart.addTypeTests(wrappers.DelegatingQueue, _is_DelegatingQueue_default);
  const _is_DelegatingMap_default = Symbol('_is_DelegatingMap_default');
  var _base$1 = dart.privateName(wrappers, "DelegatingMap._base");
  wrappers.DelegatingMap$ = dart.generic((K, V) => {
    var MapOfK$V = () => (MapOfK$V = dart.constFn(core.Map$(K, V)))();
    var MapEntryOfK$V = () => (MapEntryOfK$V = dart.constFn(core.MapEntry$(K, V)))();
    var IterableOfMapEntryOfK$V = () => (IterableOfMapEntryOfK$V = dart.constFn(core.Iterable$(MapEntryOfK$V())))();
    var KAndVToV = () => (KAndVToV = dart.constFn(dart.fnType(V, [K, V])))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var VToV = () => (VToV = dart.constFn(dart.fnType(V, [V])))();
    var VoidToNV = () => (VoidToNV = dart.constFn(dart.nullable(VoidToV())))();
    class DelegatingMap extends core.Object {
      get [_base$]() {
        return this[_base$1];
      }
      set [_base$](value) {
        super[_base$] = value;
      }
      static typed(K, V, base) {
        if (base == null) dart.nullFailed(L3, 495, 36, "base");
        return base[$cast](K, V);
      }
      _get(key) {
        return this[_base$][$_get](key);
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        this[_base$][$_set](key, value);
        return value$;
      }
      addAll(other) {
        MapOfK$V().as(other);
        if (other == null) dart.nullFailed(L3, 506, 25, "other");
        this[_base$][$addAll](other);
      }
      addEntries(entries) {
        IterableOfMapEntryOfK$V().as(entries);
        if (entries == null) dart.nullFailed(L3, 511, 44, "entries");
        this[_base$][$addEntries](entries);
      }
      clear() {
        this[_base$][$clear]();
      }
      cast(K2, V2) {
        return this[_base$][$cast](K2, V2);
      }
      containsKey(key) {
        return this[_base$][$containsKey](key);
      }
      containsValue(value) {
        return this[_base$][$containsValue](value);
      }
      get entries() {
        return this[_base$][$entries];
      }
      forEach(f) {
        if (f == null) dart.nullFailed(L3, 533, 36, "f");
        this[_base$][$forEach](f);
      }
      get isEmpty() {
        return this[_base$][$isEmpty];
      }
      get isNotEmpty() {
        return this[_base$][$isNotEmpty];
      }
      get keys() {
        return this[_base$][$keys];
      }
      get length() {
        return this[_base$][$length];
      }
      map(K2, V2, transform) {
        if (transform == null) dart.nullFailed(L3, 550, 59, "transform");
        return this[_base$][$map](K2, V2, transform);
      }
      putIfAbsent(key, ifAbsent) {
        K.as(key);
        VoidToV().as(ifAbsent);
        if (ifAbsent == null) dart.nullFailed(L3, 554, 37, "ifAbsent");
        return this[_base$][$putIfAbsent](key, ifAbsent);
      }
      remove(key) {
        return this[_base$][$remove](key);
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(L3, 561, 40, "test");
        return this[_base$][$removeWhere](test);
      }
      retype(K2, V2) {
        return this.cast(K2, V2);
      }
      get values() {
        return this[_base$][$values];
      }
      toString() {
        return dart.toString(this[_base$]);
      }
      update(key, update, opts) {
        K.as(key);
        VToV().as(update);
        if (update == null) dart.nullFailed(L3, 573, 33, "update");
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToNV().as(ifAbsent);
        return this[_base$][$update](key, update, {ifAbsent: ifAbsent});
      }
      updateAll(update) {
        KAndVToV().as(update);
        if (update == null) dart.nullFailed(L3, 577, 35, "update");
        return this[_base$][$updateAll](update);
      }
    }
    (DelegatingMap.new = function(base) {
      if (base == null) dart.nullFailed(L3, 481, 33, "base");
      this[_base$1] = base;
      ;
    }).prototype = DelegatingMap.prototype;
    DelegatingMap.prototype[dart.isMap] = true;
    dart.addTypeTests(DelegatingMap);
    DelegatingMap.prototype[_is_DelegatingMap_default] = true;
    dart.addTypeCaches(DelegatingMap);
    DelegatingMap[dart.implements] = () => [core.Map$(K, V)];
    dart.setMethodSignature(DelegatingMap, () => ({
      __proto__: dart.getMethods(DelegatingMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addEntries: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$addEntries]: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      cast: dart.gFnType((K2, V2) => [core.Map$(K2, V2), []], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$cast]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), []], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      containsKey: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$containsKey]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      containsValue: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      [$containsValue]: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
      [$forEach]: dart.fnType(dart.void, [dart.fnType(dart.void, [K, V])]),
      map: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$map]: dart.gFnType((K2, V2) => [core.Map$(K2, V2), [dart.fnType(core.MapEntry$(K2, V2), [K, V])]], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      putIfAbsent: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$putIfAbsent]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      remove: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      [$removeWhere]: dart.fnType(dart.void, [dart.fnType(core.bool, [K, V])]),
      retype: dart.gFnType((K2, V2) => [core.Map$(K2, V2), []], (K2, V2) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
      update: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      [$update]: dart.fnType(V, [dart.nullable(core.Object), dart.nullable(core.Object)], {ifAbsent: dart.nullable(core.Object)}, {}),
      updateAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      [$updateAll]: dart.fnType(dart.void, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(DelegatingMap, () => ({
      __proto__: dart.getGetters(DelegatingMap.__proto__),
      entries: core.Iterable$(core.MapEntry$(K, V)),
      [$entries]: core.Iterable$(core.MapEntry$(K, V)),
      isEmpty: core.bool,
      [$isEmpty]: core.bool,
      isNotEmpty: core.bool,
      [$isNotEmpty]: core.bool,
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K),
      length: core.int,
      [$length]: core.int,
      values: core.Iterable$(V),
      [$values]: core.Iterable$(V)
    }));
    dart.setLibraryUri(DelegatingMap, L4);
    dart.setFieldSignature(DelegatingMap, () => ({
      __proto__: dart.getFields(DelegatingMap.__proto__),
      [_base$]: dart.finalFieldType(core.Map$(K, V))
    }));
    dart.defineExtensionMethods(DelegatingMap, [
      '_get',
      '_set',
      'addAll',
      'addEntries',
      'clear',
      'cast',
      'containsKey',
      'containsValue',
      'forEach',
      'map',
      'putIfAbsent',
      'remove',
      'removeWhere',
      'toString',
      'update',
      'updateAll'
    ]);
    dart.defineExtensionAccessors(DelegatingMap, [
      'entries',
      'isEmpty',
      'isNotEmpty',
      'keys',
      'length',
      'values'
    ]);
    return DelegatingMap;
  });
  wrappers.DelegatingMap = wrappers.DelegatingMap$();
  dart.addTypeTests(wrappers.DelegatingMap, _is_DelegatingMap_default);
  var _baseMap$ = dart.privateName(wrappers, "_baseMap");
  const _is_MapKeySet_default = Symbol('_is_MapKeySet_default');
  wrappers.MapKeySet$ = dart.generic(E => {
    var ETobool = () => (ETobool = dart.constFn(dart.fnType(core.bool, [E])))();
    var SetOfE = () => (SetOfE = dart.constFn(core.Set$(E)))();
    const _DelegatingIterableBase_UnmodifiableSetMixin$36 = class _DelegatingIterableBase_UnmodifiableSetMixin extends wrappers._DelegatingIterableBase$(E) {};
    (_DelegatingIterableBase_UnmodifiableSetMixin$36.new = function() {
      _DelegatingIterableBase_UnmodifiableSetMixin$36.__proto__.new.call(this);
    }).prototype = _DelegatingIterableBase_UnmodifiableSetMixin$36.prototype;
    dart.applyMixin(_DelegatingIterableBase_UnmodifiableSetMixin$36, unmodifiable_wrappers.UnmodifiableSetMixin$(E));
    class MapKeySet extends _DelegatingIterableBase_UnmodifiableSetMixin$36 {
      get [_base$]() {
        return this[_baseMap$][$keys];
      }
      cast(T) {
        if (wrappers.MapKeySet$(T).is(this)) {
          return wrappers.MapKeySet$(T).as(this);
        }
        return core.Set.castFrom(E, T, this);
      }
      contains(element) {
        return this[_baseMap$][$containsKey](element);
      }
      get isEmpty() {
        return this[_baseMap$][$isEmpty];
      }
      get isNotEmpty() {
        return this[_baseMap$][$isNotEmpty];
      }
      get length() {
        return this[_baseMap$][$length];
      }
      toString() {
        return dart.str("{") + dart.str(this[_base$][$join](", ")) + dart.str("}");
      }
      containsAll(other) {
        if (other == null) dart.nullFailed(L3, 622, 38, "other");
        return other[$every](dart.bind(this, 'contains'));
      }
      difference(other) {
        if (other == null) dart.nullFailed(L3, 632, 34, "other");
        return this.where(dart.fn(element => !dart.test(other.contains(element)), ETobool()))[$toSet]();
      }
      intersection(other) {
        if (other == null) dart.nullFailed(L3, 643, 36, "other");
        return this.where(dart.bind(other, 'contains'))[$toSet]();
      }
      lookup(element) {
        return dart.throw(new core.UnsupportedError.new("MapKeySet doesn't support lookup()."));
      }
      retype(T) {
        return core.Set.castFrom(E, T, this);
      }
      union(other) {
        let t0;
        SetOfE().as(other);
        if (other == null) dart.nullFailed(L3, 663, 23, "other");
        t0 = this.toSet();
        return (() => {
          t0.addAll(other);
          return t0;
        })();
      }
    }
    (MapKeySet.new = function(_baseMap) {
      if (_baseMap == null) dart.nullFailed(L3, 593, 18, "_baseMap");
      this[_baseMap$] = _baseMap;
      MapKeySet.__proto__.new.call(this);
      ;
    }).prototype = MapKeySet.prototype;
    dart.addTypeTests(MapKeySet);
    MapKeySet.prototype[_is_MapKeySet_default] = true;
    dart.addTypeCaches(MapKeySet);
    dart.setMethodSignature(MapKeySet, () => ({
      __proto__: dart.getMethods(MapKeySet.__proto__),
      cast: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
      difference: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
      intersection: dart.fnType(core.Set$(E), [core.Set$(dart.nullable(core.Object))]),
      lookup: dart.fnType(E, [dart.nullable(core.Object)]),
      retype: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      union: dart.fnType(core.Set$(E), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(MapKeySet, () => ({
      __proto__: dart.getGetters(MapKeySet.__proto__),
      [_base$]: core.Iterable$(E)
    }));
    dart.setLibraryUri(MapKeySet, L4);
    dart.setFieldSignature(MapKeySet, () => ({
      __proto__: dart.getFields(MapKeySet.__proto__),
      [_baseMap$]: dart.finalFieldType(core.Map$(E, dart.dynamic))
    }));
    dart.defineExtensionMethods(MapKeySet, ['cast', 'contains', 'toString']);
    dart.defineExtensionAccessors(MapKeySet, ['isEmpty', 'isNotEmpty', 'length']);
    return MapKeySet;
  });
  wrappers.MapKeySet = wrappers.MapKeySet$();
  dart.addTypeTests(wrappers.MapKeySet, _is_MapKeySet_default);
  var _keyForValue$ = dart.privateName(wrappers, "_keyForValue");
  const _is_MapValueSet_default = Symbol('_is_MapValueSet_default');
  wrappers.MapValueSet$ = dart.generic((K, V) => {
    var KAndVToNullN = () => (KAndVToNullN = dart.constFn(dart.fnType(core.Null, [K, V])))();
    var VoidToV = () => (VoidToV = dart.constFn(dart.fnType(V, [])))();
    var IterableOfV = () => (IterableOfV = dart.constFn(core.Iterable$(V)))();
    var VTobool = () => (VTobool = dart.constFn(dart.fnType(core.bool, [V])))();
    var _IdentityHashSetOfV = () => (_IdentityHashSetOfV = dart.constFn(collection._IdentityHashSet$(V)))();
    var SetOfV = () => (SetOfV = dart.constFn(core.Set$(V)))();
    class MapValueSet extends wrappers._DelegatingIterableBase$(V) {
      get [_base$]() {
        return this[_baseMap$][$values];
      }
      cast(T) {
        if (core.Set$(T).is(this)) {
          return core.Set$(T).as(this);
        }
        return core.Set.castFrom(V, T, this);
      }
      contains(element) {
        let t0;
        if (!V.is(element)) return false;
        let key = (t0 = element, this[_keyForValue$](t0));
        return this[_baseMap$][$containsKey](key);
      }
      get isEmpty() {
        return this[_baseMap$][$isEmpty];
      }
      get isNotEmpty() {
        return this[_baseMap$][$isNotEmpty];
      }
      get length() {
        return this[_baseMap$][$length];
      }
      toString() {
        return dart.toString(this.toSet());
      }
      add(value) {
        let t0;
        V.as(value);
        let key = (t0 = value, this[_keyForValue$](t0));
        let result = false;
        this[_baseMap$][$putIfAbsent](key, dart.fn(() => {
          result = true;
          return value;
        }, VoidToV()));
        return result;
      }
      addAll(elements) {
        IterableOfV().as(elements);
        if (elements == null) dart.nullFailed(L3, 741, 27, "elements");
        return elements[$forEach](dart.bind(this, 'add'));
      }
      clear() {
        return this[_baseMap$][$clear]();
      }
      containsAll(other) {
        if (other == null) dart.nullFailed(L3, 747, 38, "other");
        return other[$every](dart.bind(this, 'contains'));
      }
      difference(other) {
        if (other == null) dart.nullFailed(L3, 757, 34, "other");
        return this.where(dart.fn(element => !dart.test(other.contains(element)), VTobool()))[$toSet]();
      }
      intersection(other) {
        if (other == null) dart.nullFailed(L3, 768, 36, "other");
        return this.where(dart.bind(other, 'contains'))[$toSet]();
      }
      lookup(element) {
        let t0;
        if (!V.is(element)) return null;
        let key = (t0 = element, this[_keyForValue$](t0));
        return this[_baseMap$][$_get](key);
      }
      remove(element) {
        let t0;
        if (!V.is(element)) return false;
        let key = (t0 = element, this[_keyForValue$](t0));
        if (!dart.test(this[_baseMap$][$containsKey](key))) return false;
        this[_baseMap$][$remove](key);
        return true;
      }
      removeAll(elements) {
        if (elements == null) dart.nullFailed(L3, 789, 36, "elements");
        return elements[$forEach](dart.bind(this, 'remove'));
      }
      removeWhere(test) {
        if (test == null) dart.nullFailed(L3, 792, 37, "test");
        let toRemove = [];
        this[_baseMap$][$forEach](dart.fn((key, value) => {
          if (dart.test(test(value))) toRemove[$add](key);
        }, KAndVToNullN()));
        toRemove[$forEach](dart.bind(this[_baseMap$], $remove));
      }
      retainAll(elements) {
        let t0;
        if (elements == null) dart.nullFailed(L3, 801, 36, "elements");
        let valuesToRetain = new (_IdentityHashSetOfV()).new();
        for (let element of elements) {
          if (!V.is(element)) continue;
          let key = (t0 = element, this[_keyForValue$](t0));
          if (!dart.test(this[_baseMap$][$containsKey](key))) continue;
          valuesToRetain.add(dart.nullCheck(this[_baseMap$][$_get](key)));
        }
        let keysToRemove = [];
        this[_baseMap$][$forEach](dart.fn((k, v) => {
          if (!dart.test(valuesToRetain.contains(v))) keysToRemove[$add](k);
        }, KAndVToNullN()));
        keysToRemove[$forEach](dart.bind(this[_baseMap$], $remove));
      }
      retainWhere(test) {
        if (test == null) dart.nullFailed(L3, 819, 37, "test");
        return this.removeWhere(dart.fn(element => !dart.test(test(element)), VTobool()));
      }
      retype(T) {
        return core.Set.castFrom(V, T, this);
      }
      union(other) {
        let t0;
        SetOfV().as(other);
        if (other == null) dart.nullFailed(L3, 834, 23, "other");
        t0 = this.toSet();
        return (() => {
          t0.addAll(other);
          return t0;
        })();
      }
    }
    (MapValueSet.new = function(_baseMap, _keyForValue) {
      if (_baseMap == null) dart.nullFailed(L3, 696, 20, "_baseMap");
      if (_keyForValue == null) dart.nullFailed(L3, 696, 35, "_keyForValue");
      this[_baseMap$] = _baseMap;
      this[_keyForValue$] = _keyForValue;
      MapValueSet.__proto__.new.call(this);
      ;
    }).prototype = MapValueSet.prototype;
    dart.addTypeTests(MapValueSet);
    MapValueSet.prototype[_is_MapValueSet_default] = true;
    dart.addTypeCaches(MapValueSet);
    MapValueSet[dart.implements] = () => [core.Set$(V)];
    dart.setMethodSignature(MapValueSet, () => ({
      __proto__: dart.getMethods(MapValueSet.__proto__),
      cast: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      [$cast]: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      add: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      containsAll: dart.fnType(core.bool, [core.Iterable$(dart.nullable(core.Object))]),
      difference: dart.fnType(core.Set$(V), [core.Set$(dart.nullable(core.Object))]),
      intersection: dart.fnType(core.Set$(V), [core.Set$(dart.nullable(core.Object))]),
      lookup: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      remove: dart.fnType(core.bool, [dart.nullable(core.Object)]),
      removeAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      removeWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [V])]),
      retainAll: dart.fnType(dart.void, [core.Iterable$(dart.nullable(core.Object))]),
      retainWhere: dart.fnType(dart.void, [dart.fnType(core.bool, [V])]),
      retype: dart.gFnType(T => [core.Set$(T), []], T => [dart.nullable(core.Object)]),
      union: dart.fnType(core.Set$(V), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(MapValueSet, () => ({
      __proto__: dart.getGetters(MapValueSet.__proto__),
      [_base$]: core.Iterable$(V)
    }));
    dart.setLibraryUri(MapValueSet, L4);
    dart.setFieldSignature(MapValueSet, () => ({
      __proto__: dart.getFields(MapValueSet.__proto__),
      [_baseMap$]: dart.finalFieldType(core.Map$(K, V)),
      [_keyForValue$]: dart.finalFieldType(dart.fnType(K, [V]))
    }));
    dart.defineExtensionMethods(MapValueSet, ['cast', 'contains', 'toString']);
    dart.defineExtensionAccessors(MapValueSet, ['isEmpty', 'isNotEmpty', 'length']);
    return MapValueSet;
  });
  wrappers.MapValueSet = wrappers.MapValueSet$();
  dart.addTypeTests(wrappers.MapValueSet, _is_MapValueSet_default);
  dart.trackLibraries("packages/collection/src/empty_unmodifiable_set.dart", {
    "package:collection/src/empty_unmodifiable_set.dart": empty_unmodifiable_set,
    "package:collection/src/unmodifiable_wrappers.dart": unmodifiable_wrappers,
    "package:collection/src/wrappers.dart": wrappers
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["empty_unmodifiable_set.dart","wrappers.dart","unmodifiable_wrappers.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/collection/src/empty_unmodifiable_set.dart.lib.js"}');
  // Exports:
  return {
    src__empty_unmodifiable_set: empty_unmodifiable_set,
    src__unmodifiable_wrappers: unmodifiable_wrappers,
    src__wrappers: wrappers
  };
}));

//# sourceMappingURL=empty_unmodifiable_set.dart.lib.js.map
