define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart'], (function load__packages__video_player_platform_interface__messages_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  var messages = Object.create(dart.library);
  var $_set = dartx._set;
  var $_get = dartx._get;
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var doubleL = () => (doubleL = dart.constFn(dart.legacy(core.double)))();
  var MapL = () => (MapL = dart.constFn(dart.legacy(core.Map)))();
  var StringN = () => (StringN = dart.constFn(dart.nullable(core.String)))();
  var TextureMessageL = () => (TextureMessageL = dart.constFn(dart.legacy(messages.TextureMessage)))();
  var PositionMessageL = () => (PositionMessageL = dart.constFn(dart.legacy(messages.PositionMessage)))();
  var FutureOfMapL = () => (FutureOfMapL = dart.constFn(async.Future$(MapL())))();
  var FutureLOfMapL = () => (FutureLOfMapL = dart.constFn(dart.legacy(FutureOfMapL())))();
  var dynamicToFutureLOfMapL = () => (dynamicToFutureLOfMapL = dart.constFn(dart.fnType(FutureLOfMapL(), [dart.dynamic])))();
  const CT = Object.create(null);
  var L0 = "package:video_player_platform_interface/messages.dart";
  dart.defineLazy(CT, {
    get C1() {
      return C1 = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C0() {
      return C0 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.initialize"
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.create"
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.dispose"
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.setLooping"
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.setVolume"
      });
    },
    get C6() {
      return C6 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.setPlaybackSpeed"
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.play"
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.position"
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.seekTo"
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.pause"
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: platform_channel.BasicMessageChannel.prototype,
        [BasicMessageChannel__binaryMessenger]: null,
        [BasicMessageChannel_codec]: C1 || CT.C1,
        [BasicMessageChannel_name]: "dev.flutter.pigeon.VideoPlayerApi.setMixWithOthers"
      });
    }
  }, false);
  var _toMap = dart.privateName(messages, "_toMap");
  var textureId = dart.privateName(messages, "TextureMessage.textureId");
  messages.TextureMessage = class TextureMessage extends core.Object {
    get textureId() {
      return this[textureId];
    }
    set textureId(value) {
      this[textureId] = value;
    }
    [_toMap]() {
      let pigeonMap = new _js_helper.LinkedMap.new();
      pigeonMap[$_set]("textureId", this.textureId);
      return pigeonMap;
    }
    static _fromMap(pigeonMap) {
      if (pigeonMap == null) {
        return null;
      }
      let result = new messages.TextureMessage.new();
      result.textureId = intL().as(pigeonMap[$_get]("textureId"));
      return result;
    }
  };
  (messages.TextureMessage.new = function() {
    this[textureId] = null;
    ;
  }).prototype = messages.TextureMessage.prototype;
  dart.addTypeTests(messages.TextureMessage);
  dart.addTypeCaches(messages.TextureMessage);
  dart.setMethodSignature(messages.TextureMessage, () => ({
    __proto__: dart.getMethods(messages.TextureMessage.__proto__),
    [_toMap]: dart.fnType(dart.legacy(core.Map), [])
  }));
  dart.setLibraryUri(messages.TextureMessage, L0);
  dart.setFieldSignature(messages.TextureMessage, () => ({
    __proto__: dart.getFields(messages.TextureMessage.__proto__),
    textureId: dart.fieldType(dart.legacy(core.int))
  }));
  var asset = dart.privateName(messages, "CreateMessage.asset");
  var uri = dart.privateName(messages, "CreateMessage.uri");
  var packageName = dart.privateName(messages, "CreateMessage.packageName");
  var formatHint = dart.privateName(messages, "CreateMessage.formatHint");
  messages.CreateMessage = class CreateMessage extends core.Object {
    get asset() {
      return this[asset];
    }
    set asset(value) {
      this[asset] = value;
    }
    get uri() {
      return this[uri];
    }
    set uri(value) {
      this[uri] = value;
    }
    get packageName() {
      return this[packageName];
    }
    set packageName(value) {
      this[packageName] = value;
    }
    get formatHint() {
      return this[formatHint];
    }
    set formatHint(value) {
      this[formatHint] = value;
    }
    [_toMap]() {
      let pigeonMap = new _js_helper.LinkedMap.new();
      pigeonMap[$_set]("asset", this.asset);
      pigeonMap[$_set]("uri", this.uri);
      pigeonMap[$_set]("packageName", this.packageName);
      pigeonMap[$_set]("formatHint", this.formatHint);
      return pigeonMap;
    }
    static _fromMap(pigeonMap) {
      if (pigeonMap == null) {
        return null;
      }
      let result = new messages.CreateMessage.new();
      result.asset = StringL().as(pigeonMap[$_get]("asset"));
      result.uri = StringL().as(pigeonMap[$_get]("uri"));
      result.packageName = StringL().as(pigeonMap[$_get]("packageName"));
      result.formatHint = StringL().as(pigeonMap[$_get]("formatHint"));
      return result;
    }
  };
  (messages.CreateMessage.new = function() {
    this[asset] = null;
    this[uri] = null;
    this[packageName] = null;
    this[formatHint] = null;
    ;
  }).prototype = messages.CreateMessage.prototype;
  dart.addTypeTests(messages.CreateMessage);
  dart.addTypeCaches(messages.CreateMessage);
  dart.setMethodSignature(messages.CreateMessage, () => ({
    __proto__: dart.getMethods(messages.CreateMessage.__proto__),
    [_toMap]: dart.fnType(dart.legacy(core.Map), [])
  }));
  dart.setLibraryUri(messages.CreateMessage, L0);
  dart.setFieldSignature(messages.CreateMessage, () => ({
    __proto__: dart.getFields(messages.CreateMessage.__proto__),
    asset: dart.fieldType(dart.legacy(core.String)),
    uri: dart.fieldType(dart.legacy(core.String)),
    packageName: dart.fieldType(dart.legacy(core.String)),
    formatHint: dart.fieldType(dart.legacy(core.String))
  }));
  var textureId$ = dart.privateName(messages, "LoopingMessage.textureId");
  var isLooping = dart.privateName(messages, "LoopingMessage.isLooping");
  messages.LoopingMessage = class LoopingMessage extends core.Object {
    get textureId() {
      return this[textureId$];
    }
    set textureId(value) {
      this[textureId$] = value;
    }
    get isLooping() {
      return this[isLooping];
    }
    set isLooping(value) {
      this[isLooping] = value;
    }
    [_toMap]() {
      let pigeonMap = new _js_helper.LinkedMap.new();
      pigeonMap[$_set]("textureId", this.textureId);
      pigeonMap[$_set]("isLooping", this.isLooping);
      return pigeonMap;
    }
    static _fromMap(pigeonMap) {
      if (pigeonMap == null) {
        return null;
      }
      let result = new messages.LoopingMessage.new();
      result.textureId = intL().as(pigeonMap[$_get]("textureId"));
      result.isLooping = boolL().as(pigeonMap[$_get]("isLooping"));
      return result;
    }
  };
  (messages.LoopingMessage.new = function() {
    this[textureId$] = null;
    this[isLooping] = null;
    ;
  }).prototype = messages.LoopingMessage.prototype;
  dart.addTypeTests(messages.LoopingMessage);
  dart.addTypeCaches(messages.LoopingMessage);
  dart.setMethodSignature(messages.LoopingMessage, () => ({
    __proto__: dart.getMethods(messages.LoopingMessage.__proto__),
    [_toMap]: dart.fnType(dart.legacy(core.Map), [])
  }));
  dart.setLibraryUri(messages.LoopingMessage, L0);
  dart.setFieldSignature(messages.LoopingMessage, () => ({
    __proto__: dart.getFields(messages.LoopingMessage.__proto__),
    textureId: dart.fieldType(dart.legacy(core.int)),
    isLooping: dart.fieldType(dart.legacy(core.bool))
  }));
  var textureId$0 = dart.privateName(messages, "VolumeMessage.textureId");
  var volume = dart.privateName(messages, "VolumeMessage.volume");
  messages.VolumeMessage = class VolumeMessage extends core.Object {
    get textureId() {
      return this[textureId$0];
    }
    set textureId(value) {
      this[textureId$0] = value;
    }
    get volume() {
      return this[volume];
    }
    set volume(value) {
      this[volume] = value;
    }
    [_toMap]() {
      let pigeonMap = new _js_helper.LinkedMap.new();
      pigeonMap[$_set]("textureId", this.textureId);
      pigeonMap[$_set]("volume", this.volume);
      return pigeonMap;
    }
    static _fromMap(pigeonMap) {
      if (pigeonMap == null) {
        return null;
      }
      let result = new messages.VolumeMessage.new();
      result.textureId = intL().as(pigeonMap[$_get]("textureId"));
      result.volume = doubleL().as(pigeonMap[$_get]("volume"));
      return result;
    }
  };
  (messages.VolumeMessage.new = function() {
    this[textureId$0] = null;
    this[volume] = null;
    ;
  }).prototype = messages.VolumeMessage.prototype;
  dart.addTypeTests(messages.VolumeMessage);
  dart.addTypeCaches(messages.VolumeMessage);
  dart.setMethodSignature(messages.VolumeMessage, () => ({
    __proto__: dart.getMethods(messages.VolumeMessage.__proto__),
    [_toMap]: dart.fnType(dart.legacy(core.Map), [])
  }));
  dart.setLibraryUri(messages.VolumeMessage, L0);
  dart.setFieldSignature(messages.VolumeMessage, () => ({
    __proto__: dart.getFields(messages.VolumeMessage.__proto__),
    textureId: dart.fieldType(dart.legacy(core.int)),
    volume: dart.fieldType(dart.legacy(core.double))
  }));
  var textureId$1 = dart.privateName(messages, "PlaybackSpeedMessage.textureId");
  var speed = dart.privateName(messages, "PlaybackSpeedMessage.speed");
  messages.PlaybackSpeedMessage = class PlaybackSpeedMessage extends core.Object {
    get textureId() {
      return this[textureId$1];
    }
    set textureId(value) {
      this[textureId$1] = value;
    }
    get speed() {
      return this[speed];
    }
    set speed(value) {
      this[speed] = value;
    }
    [_toMap]() {
      let pigeonMap = new _js_helper.LinkedMap.new();
      pigeonMap[$_set]("textureId", this.textureId);
      pigeonMap[$_set]("speed", this.speed);
      return pigeonMap;
    }
    static _fromMap(pigeonMap) {
      if (pigeonMap == null) {
        return null;
      }
      let result = new messages.PlaybackSpeedMessage.new();
      result.textureId = intL().as(pigeonMap[$_get]("textureId"));
      result.speed = doubleL().as(pigeonMap[$_get]("speed"));
      return result;
    }
  };
  (messages.PlaybackSpeedMessage.new = function() {
    this[textureId$1] = null;
    this[speed] = null;
    ;
  }).prototype = messages.PlaybackSpeedMessage.prototype;
  dart.addTypeTests(messages.PlaybackSpeedMessage);
  dart.addTypeCaches(messages.PlaybackSpeedMessage);
  dart.setMethodSignature(messages.PlaybackSpeedMessage, () => ({
    __proto__: dart.getMethods(messages.PlaybackSpeedMessage.__proto__),
    [_toMap]: dart.fnType(dart.legacy(core.Map), [])
  }));
  dart.setLibraryUri(messages.PlaybackSpeedMessage, L0);
  dart.setFieldSignature(messages.PlaybackSpeedMessage, () => ({
    __proto__: dart.getFields(messages.PlaybackSpeedMessage.__proto__),
    textureId: dart.fieldType(dart.legacy(core.int)),
    speed: dart.fieldType(dart.legacy(core.double))
  }));
  var textureId$2 = dart.privateName(messages, "PositionMessage.textureId");
  var position = dart.privateName(messages, "PositionMessage.position");
  messages.PositionMessage = class PositionMessage extends core.Object {
    get textureId() {
      return this[textureId$2];
    }
    set textureId(value) {
      this[textureId$2] = value;
    }
    get position() {
      return this[position];
    }
    set position(value) {
      this[position] = value;
    }
    [_toMap]() {
      let pigeonMap = new _js_helper.LinkedMap.new();
      pigeonMap[$_set]("textureId", this.textureId);
      pigeonMap[$_set]("position", this.position);
      return pigeonMap;
    }
    static _fromMap(pigeonMap) {
      if (pigeonMap == null) {
        return null;
      }
      let result = new messages.PositionMessage.new();
      result.textureId = intL().as(pigeonMap[$_get]("textureId"));
      result.position = intL().as(pigeonMap[$_get]("position"));
      return result;
    }
  };
  (messages.PositionMessage.new = function() {
    this[textureId$2] = null;
    this[position] = null;
    ;
  }).prototype = messages.PositionMessage.prototype;
  dart.addTypeTests(messages.PositionMessage);
  dart.addTypeCaches(messages.PositionMessage);
  dart.setMethodSignature(messages.PositionMessage, () => ({
    __proto__: dart.getMethods(messages.PositionMessage.__proto__),
    [_toMap]: dart.fnType(dart.legacy(core.Map), [])
  }));
  dart.setLibraryUri(messages.PositionMessage, L0);
  dart.setFieldSignature(messages.PositionMessage, () => ({
    __proto__: dart.getFields(messages.PositionMessage.__proto__),
    textureId: dart.fieldType(dart.legacy(core.int)),
    position: dart.fieldType(dart.legacy(core.int))
  }));
  var mixWithOthers = dart.privateName(messages, "MixWithOthersMessage.mixWithOthers");
  messages.MixWithOthersMessage = class MixWithOthersMessage extends core.Object {
    get mixWithOthers() {
      return this[mixWithOthers];
    }
    set mixWithOthers(value) {
      this[mixWithOthers] = value;
    }
    [_toMap]() {
      let pigeonMap = new _js_helper.LinkedMap.new();
      pigeonMap[$_set]("mixWithOthers", this.mixWithOthers);
      return pigeonMap;
    }
    static _fromMap(pigeonMap) {
      if (pigeonMap == null) {
        return null;
      }
      let result = new messages.MixWithOthersMessage.new();
      result.mixWithOthers = boolL().as(pigeonMap[$_get]("mixWithOthers"));
      return result;
    }
  };
  (messages.MixWithOthersMessage.new = function() {
    this[mixWithOthers] = null;
    ;
  }).prototype = messages.MixWithOthersMessage.prototype;
  dart.addTypeTests(messages.MixWithOthersMessage);
  dart.addTypeCaches(messages.MixWithOthersMessage);
  dart.setMethodSignature(messages.MixWithOthersMessage, () => ({
    __proto__: dart.getMethods(messages.MixWithOthersMessage.__proto__),
    [_toMap]: dart.fnType(dart.legacy(core.Map), [])
  }));
  dart.setLibraryUri(messages.MixWithOthersMessage, L0);
  dart.setFieldSignature(messages.MixWithOthersMessage, () => ({
    __proto__: dart.getFields(messages.MixWithOthersMessage.__proto__),
    mixWithOthers: dart.fieldType(dart.legacy(core.bool))
  }));
  var BasicMessageChannel__binaryMessenger = dart.privateName(platform_channel, "BasicMessageChannel._binaryMessenger");
  var C1;
  var BasicMessageChannel_codec = dart.privateName(platform_channel, "BasicMessageChannel.codec");
  var BasicMessageChannel_name = dart.privateName(platform_channel, "BasicMessageChannel.name");
  var C0;
  var C2;
  var C3;
  var C4;
  var C5;
  var C6;
  var C7;
  var C8;
  var C9;
  var C10;
  var C11;
  messages.VideoPlayerApi = class VideoPlayerApi extends core.Object {
    initialize() {
      return async.async(dart.void, function* initialize() {
        let channel = C0 || CT.C0;
        let replyMap = MapL().as(yield channel.send(null));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
    create(arg) {
      return async.async(TextureMessageL(), function* create() {
        let requestMap = arg[_toMap]();
        let channel = C2 || CT.C2;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
          return messages.TextureMessage._fromMap(MapL().as(replyMap[$_get]("result")));
        }
      });
    }
    dispose(arg) {
      return async.async(dart.void, function* dispose() {
        let requestMap = arg[_toMap]();
        let channel = C3 || CT.C3;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
    setLooping(arg) {
      return async.async(dart.void, function* setLooping() {
        let requestMap = arg[_toMap]();
        let channel = C4 || CT.C4;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
    setVolume(arg) {
      return async.async(dart.void, function* setVolume() {
        let requestMap = arg[_toMap]();
        let channel = C5 || CT.C5;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
    setPlaybackSpeed(arg) {
      return async.async(dart.void, function* setPlaybackSpeed() {
        let requestMap = arg[_toMap]();
        let channel = C6 || CT.C6;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
    play(arg) {
      return async.async(dart.void, function* play() {
        let requestMap = arg[_toMap]();
        let channel = C7 || CT.C7;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
    position(arg) {
      return async.async(PositionMessageL(), function* position() {
        let requestMap = arg[_toMap]();
        let channel = C8 || CT.C8;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
          return messages.PositionMessage._fromMap(MapL().as(replyMap[$_get]("result")));
        }
      });
    }
    seekTo(arg) {
      return async.async(dart.void, function* seekTo() {
        let requestMap = arg[_toMap]();
        let channel = C9 || CT.C9;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
    pause(arg) {
      return async.async(dart.void, function* pause() {
        let requestMap = arg[_toMap]();
        let channel = C10 || CT.C10;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
    setMixWithOthers(arg) {
      return async.async(dart.void, function* setMixWithOthers() {
        let requestMap = arg[_toMap]();
        let channel = C11 || CT.C11;
        let replyMap = MapL().as(yield channel.send(requestMap));
        if (replyMap == null) {
          dart.throw(new message_codec.PlatformException.new({code: "channel-error", message: "Unable to establish connection on channel.", details: null}));
        } else if (replyMap[$_get]("error") != null) {
          let error = MapL().as(replyMap[$_get]("error"));
          dart.throw(new message_codec.PlatformException.new({code: core.String.as(error[$_get]("code")), message: StringN().as(error[$_get]("message")), details: error[$_get]("details")}));
        } else {
        }
      });
    }
  };
  (messages.VideoPlayerApi.new = function() {
    ;
  }).prototype = messages.VideoPlayerApi.prototype;
  dart.addTypeTests(messages.VideoPlayerApi);
  dart.addTypeCaches(messages.VideoPlayerApi);
  dart.setMethodSignature(messages.VideoPlayerApi, () => ({
    __proto__: dart.getMethods(messages.VideoPlayerApi.__proto__),
    initialize: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    create: dart.fnType(dart.legacy(async.Future$(dart.legacy(messages.TextureMessage))), [dart.legacy(messages.CreateMessage)]),
    dispose: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(messages.TextureMessage)]),
    setLooping: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(messages.LoopingMessage)]),
    setVolume: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(messages.VolumeMessage)]),
    setPlaybackSpeed: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(messages.PlaybackSpeedMessage)]),
    play: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(messages.TextureMessage)]),
    position: dart.fnType(dart.legacy(async.Future$(dart.legacy(messages.PositionMessage))), [dart.legacy(messages.TextureMessage)]),
    seekTo: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(messages.PositionMessage)]),
    pause: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(messages.TextureMessage)]),
    setMixWithOthers: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(messages.MixWithOthersMessage)])
  }));
  dart.setLibraryUri(messages.VideoPlayerApi, L0);
  messages.TestHostVideoPlayerApi = class TestHostVideoPlayerApi extends core.Object {
    static setup(api) {
      {
        let channel = C0 || CT.C0;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          api.initialize();
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C2 || CT.C2;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.CreateMessage._fromMap(mapMessage);
          let output = api.create(input);
          return new _js_helper.LinkedMap.from(["result", output[_toMap]()]);
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C3 || CT.C3;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.TextureMessage._fromMap(mapMessage);
          api.dispose(input);
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C4 || CT.C4;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.LoopingMessage._fromMap(mapMessage);
          api.setLooping(input);
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C5 || CT.C5;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.VolumeMessage._fromMap(mapMessage);
          api.setVolume(input);
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C6 || CT.C6;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.PlaybackSpeedMessage._fromMap(mapMessage);
          api.setPlaybackSpeed(input);
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C7 || CT.C7;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.TextureMessage._fromMap(mapMessage);
          api.play(input);
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C8 || CT.C8;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.TextureMessage._fromMap(mapMessage);
          let output = api.position(input);
          return new _js_helper.LinkedMap.from(["result", output[_toMap]()]);
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C9 || CT.C9;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.PositionMessage._fromMap(mapMessage);
          api.seekTo(input);
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C10 || CT.C10;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.TextureMessage._fromMap(mapMessage);
          api.pause(input);
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
      {
        let channel = C11 || CT.C11;
        channel.setMockMessageHandler(dart.fn(message => async.async(MapL(), function*() {
          let mapMessage = MapL().as(message);
          let input = messages.MixWithOthersMessage._fromMap(mapMessage);
          api.setMixWithOthers(input);
          return new _js_helper.LinkedMap.new();
        }), dynamicToFutureLOfMapL()));
      }
    }
  };
  (messages.TestHostVideoPlayerApi.new = function() {
    ;
  }).prototype = messages.TestHostVideoPlayerApi.prototype;
  dart.addTypeTests(messages.TestHostVideoPlayerApi);
  dart.addTypeCaches(messages.TestHostVideoPlayerApi);
  dart.setLibraryUri(messages.TestHostVideoPlayerApi, L0);
  dart.trackLibraries("packages/video_player_platform_interface/messages.dart", {
    "package:video_player_platform_interface/messages.dart": messages
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["messages.dart"],"names":[],"mappings":"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","file":"../../../../../../packages/video_player_platform_interface/messages.dart.lib.js"}');
  // Exports:
  return {
    messages: messages
  };
}));

//# sourceMappingURL=messages.dart.lib.js.map
